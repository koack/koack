{"version":3,"sources":["../../src/message-router/index.js"],"names":["logger","handle","ctx","message","action","extendsContext","messageCtx","Object","create","assign","context","_context","handler","canCommandHandleWithMention","hasMention","command","destinationType","mention","includes","actions","mentionOnly","every","map","next","console","log","event","text","userId","rtm","activeUserId","botMention","ts","originalText","type","messageType","subtype","messageSubtype","teamId","channelId","getChannelType","debug","warn","startsWithMention","startsWith","substr","length","trim","replace","split","toLowerCase","actionCommand","commands","get","stop","regexps","some","match","regexp"],"mappings":"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","file":"index.js","sourcesContent":["import Logger from 'nightingale-logger/src';\nimport type { ActionType, MessageType } from './types';\nimport createActionHandlersMap from './createActionHandlersMap';\n\nconst logger = new Logger('koack:message-router');\n\nconst handle = (ctx, message: MessageType, action: ActionType, extendsContext: Object) => {\n  let messageCtx = Object.create(ctx);\n\n  Object.assign(messageCtx, {\n    message,\n    ...extendsContext,\n    logger: ctx.logger.context({\n      ...ctx.logger._context,\n      message,\n    }),\n  });\n\n  action.handler(messageCtx);\n};\n\nconst canCommandHandleWithMention = (hasMention, command, destinationType) => {\n  if (!hasMention) {\n    if (command.mention === false) return true;\n    if (command.mention.includes(destinationType)) return false;\n  } else {\n    // if hasMention\n    // eslint-disable-next-line no-lonely-if\n    if (command.mention === false) return false;\n  }\n  return true;\n};\n\nexport default (actions: Array<ActionType>) => {\n  const mentionOnly = actions.every(action => action.mention === true);\n  const map = createActionHandlersMap(actions);\n\n  return (ctx, next) => {\n    console.log(ctx.event);\n    if (!ctx.event.text || ctx.userId === ctx.rtm.activeUserId) return;\n\n    const botMention = `<@${ctx.rtm.activeUserId}>`;\n\n    const { ts, text: originalText, type: messageType, subtype: messageSubtype } = ctx.event;\n    const { teamId, userId, channelId } = ctx;\n    const destinationType = ctx.getChannelType();\n    let text = originalText;\n\n    logger.debug('message', { ts, destinationType, text, messageType, messageSubtype });\n    if (!destinationType) {\n      logger.warn('Unsupported destination type', { destinationType });\n      return next();\n    }\n\n    const startsWithMention = text.startsWith(botMention);\n    const hasMention = startsWithMention || text.includes(botMention);\n\n    if (mentionOnly && !hasMention) {\n      return next();\n    }\n\n    const message: MessageType = { ts, text: originalText, teamId, userId, channelId };\n\n    // Clean text\n    // Remove mention\n    if (startsWithMention) {\n      text = text.substr(botMention.length);\n    }\n\n    // remove `:` (`@bot: do something !`)\n    text = text.trim().replace(/^[\\s:]*(?!\\w)\\s*/, '');\n\n    // try to find a command\n    const command = text.split(' ', 2)[0].toLowerCase();\n    const actionCommand = command && map[destinationType].commands.get(command);\n\n    if (actionCommand && canCommandHandleWithMention(hasMention, actionCommand, destinationType)) {\n      text = text.substr(command.length).replace(/^[\\s:]*(?!\\w)\\s*/, '');\n\n      logger.debug('actionCommand', { command, text });\n\n      handle(ctx, message, actionCommand, { text });\n\n      if (actionCommand.stop) {\n        return;\n      }\n    }\n\n    // try to find a matching regexp\n    if (map[destinationType].regexps.some((action) => {\n      if (!canCommandHandleWithMention(hasMention, action, destinationType)) return false;\n\n      const match = !action.regexp ? true : text.match(action.regexp);\n      if (!match) return false;\n\n      logger.debug('actionRegexp', { text, match });\n      handle(ctx, message, action, { text, match });\n\n      return action.stop;\n    })) {\n      return;\n    }\n\n    // Could not find anything\n    return next();\n  };\n};\n"]}