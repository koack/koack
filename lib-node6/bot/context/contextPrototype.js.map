{"version":3,"sources":["../../../src/bot/context/contextPrototype.js"],"names":["getChannelType","channelId","user","rtm","dataStore","getUserById","Object","defineProperty","value","dm","getDMById","channel","getChannelById","group","getGroupById","userDM","getDMByUserId","userId","sendMessage","message","options","reply","replyInDM","Error","id","webClient","im","open","then","res","mention","undefined","fromMe","activeUserId"],"mappings":";;;;;;AAAA;;;;;;kBAEe;AACbA,mBAAiB;AACf,YAAQ,KAAKC,SAAL,CAAe,CAAf,CAAR;AACE,WAAK,GAAL;AACE,eAAO,IAAP;AACF,WAAK,GAAL;AACE,eAAO,SAAP;AACF,WAAK,GAAL;AACE,eAAO,OAAP;AANJ;AAQD,GAVY;;AAYb,MAAIC,IAAJ,GAAW;AACT,UAAMA,OAAO,KAAKD,SAAL,IAAkB,KAAKE,GAAL,CAASC,SAAT,CAAmBC,WAAnB,CAA+B,KAAKJ,SAApC,CAA/B;AACAK,WAAOC,cAAP,CAAsB,IAAtB,EAA4B,MAA5B,EAAoC,EAAEC,OAAON,IAAT,EAApC;AACA,WAAOA,IAAP;AACD,GAhBY;;AAkBb,MAAIO,EAAJ,GAAS;AACP,UAAMA,KAAK,KAAKR,SAAL,IAAkB,KAAKE,GAAL,CAASC,SAAT,CAAmBM,SAAnB,CAA6B,KAAKT,SAAlC,CAA7B;AACAK,WAAOC,cAAP,CAAsB,IAAtB,EAA4B,IAA5B,EAAkC,EAAEC,OAAOC,EAAT,EAAlC;AACA,WAAOA,EAAP;AACD,GAtBY;;AAwBb,MAAIE,OAAJ,GAAc;AACZ,UAAMA,UAAU,KAAKV,SAAL,IAAkB,KAAKE,GAAL,CAASC,SAAT,CAAmBQ,cAAnB,CAAkC,KAAKX,SAAvC,CAAlC;AACAK,WAAOC,cAAP,CAAsB,IAAtB,EAA4B,SAA5B,EAAuC,EAAEC,OAAOG,OAAT,EAAvC;AACA,WAAOA,OAAP;AACD,GA5BY;;AA8Bb,MAAIE,KAAJ,GAAY;AACV,UAAMA,QAAQ,KAAKZ,SAAL,IAAkB,KAAKE,GAAL,CAASC,SAAT,CAAmBU,YAAnB,CAAgC,KAAKb,SAArC,CAAhC;AACAK,WAAOC,cAAP,CAAsB,IAAtB,EAA4B,OAA5B,EAAqC,EAAEC,OAAOK,KAAT,EAArC;AACA,WAAOA,KAAP;AACD,GAlCY;;AAoCb,MAAIE,MAAJ,GAAa;AACX,UAAMN,KAAK,KAAKR,SAAL,IAAkB,KAAKE,GAAL,CAASC,SAAT,CAAmBY,aAAnB,CAAiC,KAAKC,MAAtC,CAA7B;AACAX,WAAOC,cAAP,CAAsB,IAAtB,EAA4B,IAA5B,EAAkC,EAAEC,OAAOC,EAAT,EAAlC;AACA,WAAOA,EAAP;AACD,GAxCY;;AA0Cb;;;;;AAKAS,cAAYjB,SAAZ,EAA+BkB,OAA/B,EAAgDC,OAAhD,EAA2F;AACzF,WAAO,2BAAY,IAAZ,EAAkBnB,SAAlB,EAA6BkB,OAA7B,EAAsCC,OAAtC,CAAP;AACD,GAjDY;;AAmDb;;;AAGAC,QAAMF,OAAN,EAAuBC,OAAvB,EAAkE;AAChE,WAAO,KAAKF,WAAL,CAAiB,KAAKjB,SAAtB,EAAiCkB,OAAjC,EAA0CC,OAA1C,CAAP;AACD,GAxDY;;AA0Db;;;AAGAE,YAAUH,OAAV,EAA2BC,OAA3B,EAAsE;AACpE,QAAI,KAAKnB,SAAL,CAAe,CAAf,MAAsB,GAA1B,EAA+B,MAAM,IAAIsB,KAAJ,CAAU,4CAAV,CAAN;AAC/B,UAAMR,SAAS,KAAKA,MAApB;AACA,QAAIA,MAAJ,EAAY;AACV,aAAO,KAAKG,WAAL,CAAiBH,OAAOS,EAAxB,EAA4BL,OAA5B,EAAqCC,OAArC,CAAP;AACD;;AAED,UAAMlB,OAAO,KAAKA,IAAlB;AACA,SAAKuB,SAAL,CAAeC,EAAf,CAAkBC,IAAlB,CAAuBzB,KAAKsB,EAA5B,EACGI,IADH,CACSC,GAAD,IAAS,2BAAYA,IAAIlB,OAAJ,CAAYa,EAAxB,EAA4BL,OAA5B,EAAqCC,OAArC,CADjB;AAED,GAvEY;;AAyEbU,UAAQb,MAAR,EAAyB;AACvB,QAAIA,WAAWc,SAAf,EAA0Bd,SAAS,KAAKA,MAAd;AAC1B,QAAIA,OAAO,CAAP,MAAc,GAAlB,EAAuB,MAAM,IAAIM,KAAJ,CAAW,kBAAiBN,MAAO,GAAnC,CAAN;AACvB,WAAQ,KAAIA,MAAO,GAAnB;AACD,GA7EY;;AA+Eb,MAAIe,MAAJ,GAAa;AACX,WAAO,KAAKf,MAAL,KAAgB,KAAKd,GAAL,CAAS8B,YAAhC;AACD;AAjFY,C","file":"contextPrototype.js","sourcesContent":["import sendMessage, { type SendMessageOptionsType } from './prototype/sendMessage';\n\nexport default {\n  getChannelType() {\n    switch (this.channelId[0]) {\n      case 'D':\n        return 'dm';\n      case 'C':\n        return 'channel';\n      case 'G':\n        return 'group';\n    }\n  },\n\n  get user() {\n    const user = this.channelId && this.rtm.dataStore.getUserById(this.channelId);\n    Object.defineProperty(this, 'user', { value: user });\n    return user;\n  },\n\n  get dm() {\n    const dm = this.channelId && this.rtm.dataStore.getDMById(this.channelId);\n    Object.defineProperty(this, 'dm', { value: dm });\n    return dm;\n  },\n\n  get channel() {\n    const channel = this.channelId && this.rtm.dataStore.getChannelById(this.channelId);\n    Object.defineProperty(this, 'channel', { value: channel });\n    return channel;\n  },\n\n  get group() {\n    const group = this.channelId && this.rtm.dataStore.getGroupById(this.channelId);\n    Object.defineProperty(this, 'group', { value: group });\n    return group;\n  },\n\n  get userDM() {\n    const dm = this.channelId && this.rtm.dataStore.getDMByUserId(this.userId);\n    Object.defineProperty(this, 'dm', { value: dm });\n    return dm;\n  },\n\n  /**\n   * Send a message in a channel\n   *\n   * If options is provided, use the webClient instead\n   */\n  sendMessage(channelId: string, message: string, options: ?SendMessageOptionsType): Promise {\n    return sendMessage(this, channelId, message, options);\n  },\n\n  /**\n   * Reply in the same channel as the event\n   */\n  reply(message: string, options: ?SendMessageOptionsType): Promise {\n    return this.sendMessage(this.channelId, message, options);\n  },\n\n  /**\n   * Reply in the DM of the event's user\n   */\n  replyInDM(message: string, options: ?SendMessageOptionsType): Promise {\n    if (this.channelId[0] === 'D') throw new Error('You are already in DM, use reply() instead');\n    const userDM = this.userDM;\n    if (userDM) {\n      return this.sendMessage(userDM.id, message, options);\n    }\n\n    const user = this.user;\n    this.webClient.im.open(user.id)\n      .then((res) => sendMessage(res.channel.id, message, options));\n  },\n\n  mention(userId: ?string) {\n    if (userId === undefined) userId = this.userId;\n    if (userId[0] !== 'U') throw new Error(`Not a userId: \"${userId}\"`);\n    return `<@${userId}>`;\n  },\n\n  get fromMe() {\n    return this.userId === this.rtm.activeUserId;\n  },\n};\n"]}