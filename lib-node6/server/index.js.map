{"version":3,"sources":["../../src/server/index.js"],"names":["SlackServer","constructor","config","Object","assign","slackActions","client","slackClient","scopes","callbackUrl","successUrl","callback","installInfo","team","storage","installedTeam","pool","addTeam","emit","use","get","authorize","ctx","body","listen","certificatesDirname","forEach","stop","close"],"mappings":";;;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAGA;;;;;;;AADA;;;AAuBe,MAAMA,WAAN,uBAA8B;;AAM3CC,cAAYC,MAAZ,EAA2C;AAAA;;AACzC;AACAC,WAAOC,MAAP,CAAc,IAAd,EAAoBF,MAApB;AACA;;AAEA,UAAMG,eAAe,qBAAmB;AACtCC,cAAQJ,OAAOK,WADuB;AAEtCC,cAAQN,OAAOM,MAFuB;AAGtCC,mBAAa,WAHyB;AAItCC,kBAAY,UAJ0B;AAKtCC;AAAA,qCAAU,WAAOC,WAAP,EAAuB;AAC/B,gBAAMC,OAAiB,MAAM,MAAKC,OAAL,CAAaC,aAAb,CAA2BH,WAA3B,CAA7B;AACA,gBAAKI,IAAL,CAAUC,OAAV,CAAkBJ,IAAlB;AACA,gBAAKK,IAAL,CAAU,WAAV,EAAuBN,WAAvB;AACD,SAJD;;AAAA;AAAA;AAAA;AAAA;AALsC,KAAnB,CAArB;;AAYA,SAAKO,GAAL,CAAS,mBAAEC,GAAF,CAAM,GAAN,EAAWf,aAAagB,SAAxB,CAAT;AACA,SAAKF,GAAL,CAAS,mBAAEC,GAAF,CAAM,WAAN,EAAmBf,aAAaM,QAAhC,CAAT;AACA,SAAKQ,GAAL,CAAS,mBAAEC,GAAF,CAAM,UAAN,EAAkBE,OAAOA,IAAIC,IAAJ,GAAW,YAApC,CAAT;AACD;;AAEDC,SAAOtB,MAAP,EAAiCuB,mBAAjC,EAA+D;AAC7D,SAAKvB,MAAL,GAAc,0BAAWA,MAAX,CAAd;AACA,6BAAUuB,mBAAV,EAA+B,IAA/B;AACA,SAAKX,OAAL,CAAaY,OAAb,CAAsBb,IAAD,IAAoB,KAAKG,IAAL,CAAUC,OAAV,CAAkBJ,IAAlB,CAAzC;AACD;;AAEDc,SAAO;AACL,WAAO,KAAKX,IAAL,CAAUY,KAAV,EAAP;AACD;AApC0C;kBAAxB5B,W","file":"index.js","sourcesContent":["/* @flow */\nimport Koa from 'koa';\nimport _ from 'koa-route';\nimport alplisten from 'alp-listen/src';\nimport object2map from 'object2map';\nimport Pool from '../../src/pool';\n// import bodyParser from 'koa-bodyparser';\nimport createSlackActions from './slack';\nimport type { StorageType, TeamType } from '../types/index';\n\ntype SlackClientConfigType = {|\n  clientID: string,\n  clientSecret: string,\n|};\n\ntype SlackServerConfigType = {|\n  slackClient: SlackClientConfigType,\n  pool: Pool,\n  storage: StorageType,\n  scopes: Array<string>,\n|};\n\ntype ListenConfigType = {|\n  tls: ?boolean,\n  socketPath: ?string,\n  port: ?number,\n  hostname: ?string,\n|};\n\nexport default class SlackServer extends Koa {\n  slackClient: SlackClientConfigType;\n  pool: Pool;\n  storage: StorageType;\n  scopes: Array<string>;\n\n  constructor(config: SlackServerConfigType) {\n    super();\n    Object.assign(this, config);\n    // this.use(bodyParser());\n\n    const slackActions = createSlackActions({\n      client: config.slackClient,\n      scopes: config.scopes,\n      callbackUrl: '/callback',\n      successUrl: '/success',\n      callback: async (installInfo) => {\n        const team: TeamType = await this.storage.installedTeam(installInfo);\n        this.pool.addTeam(team);\n        this.emit('installed', installInfo);\n      },\n    });\n\n    this.use(_.get('/', slackActions.authorize));\n    this.use(_.get('/callback', slackActions.callback));\n    this.use(_.get('/success', ctx => ctx.body = 'Youhou !!!'));\n  }\n\n  listen(config: ListenConfigType, certificatesDirname: ?string) {\n    this.config = object2map(config);\n    alplisten(certificatesDirname)(this);\n    this.storage.forEach((team: TeamType) => this.pool.addTeam(team));\n  }\n\n  stop() {\n    return this.pool.close();\n  }\n}\n"]}