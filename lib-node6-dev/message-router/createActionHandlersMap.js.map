{"version":3,"sources":["../../src/message-router/createActionHandlersMap.js"],"names":["logger","ActionHandlersType","commands","Map","regexps","ActionsMapType","dm","channel","group","actions","map","forEach","action","where","mention","filter","v","handler","middlewares","stop","command","has","get","warn","set","regexp","push"],"mappings":";;;;;;;;;;;AACA;;;;AACA;;;;AACA;;;;AAEA,MAAMA,SAAS,gCAAW,8BAAX,CAAf;;MAEKC,kB;AACHC,U,EAAUC,G;AACVC,S;;;MAGGC,c;AACHC,I,EAAIL,kB;AACJM,S,EAASN,kB;AACTO,O,EAAOP;;;kBAGM,iCAACQ,OAAD,EAAgD;AAAA,UAA/CA,OAA+C;;AAAA;AAC7D,UAAMC,cAAsB;AAC1BJ,UAAI,EAAEJ,UAAU,IAAIC,GAAJ,EAAZ,EAAuBC,WAAvB,EADsB;AAE1BG,eAAS,EAAEL,UAAU,IAAIC,GAAJ,EAAZ,EAAuBC,WAAvB,EAFiB;AAG1BI,aAAO,EAAEN,UAAU,IAAIC,GAAJ,EAAZ,EAAuBC,WAAvB;AAHmB,KAAtB,EAAKC,cAAL,QAAN;;AAMAI,YAAQE,OAAR,CAAiBC,MAAD,IAAwB;AAAA,cAAvBA,MAAuB;;AACtC,UAAI,CAACA,OAAOC,KAAZ,EAAmBD,OAAOC,KAAP;AACnB,UAAI,CAACD,OAAOE,OAAZ,EAAqBF,OAAOE,OAAP,GAAiBF,OAAOC,KAAP,CAAaE,MAAb,CAAoBC,KAAKA,MAAM,IAA/B,CAAjB;AACrB,UAAI,CAACJ,OAAOK,OAAZ,EAAqBL,OAAOK,OAAP,GAAiB,0BAAQL,OAAOM,WAAf,CAAjB;AACrB,UAAIN,OAAOO,IAAP,KAAgB,KAApB,EAA2BP,OAAOO,IAAP,GAAc,IAAd;;AAE3BP,aAAOC,KAAP,CAAaF,OAAb,CAAsBE,KAAD,IAAW;AAC9B,cAAMX,WAAWQ,IAAIG,KAAJ,EAAWX,QAA5B;AACA,cAAME,UAAUM,IAAIG,KAAJ,EAAWT,OAA3B;;AAEA,YAAIQ,OAAOV,QAAX,EAAqB;AACnBU,iBAAOV,QAAP,CAAgBS,OAAhB,CAAyBS,OAAD,IAAqB;AAAA,oBAApBA,OAAoB;;AAC3C,gBAAIlB,SAASmB,GAAT,CAAaD,OAAb,KAAyBlB,SAASoB,GAAT,CAAaF,OAAb,MAA0BR,MAAvD,EAA+D;AAC7DZ,qBAAOuB,IAAP,CAAY,iBAAZ,EAA+B,EAAEH,OAAF,EAA/B;AACD;;AAEDlB,qBAASoB,GAAT,CAAaT,KAAb,EAAoBW,GAApB,CAAwBJ,OAAxB,EAAiCR,MAAjC;AACD,WAND;AAOD;;AAED,YAAIA,OAAOa,MAAP,IAAiB,CAACb,OAAOV,QAA7B,EAAuC;AACrCE,kBAAQsB,IAAR,CAAad,MAAb;AACD;AACF,OAjBD;AAkBD,KAxBD;;AA0BA,WAAOF,GAAP;AAjC6D,kCAAlBL,cAAkB;AAkC9D,C","file":"createActionHandlersMap.js","sourcesContent":["/* @flow */\nimport compose from 'koa-compose';\nimport Logger from 'nightingale-logger/src';\nimport type { ActionType } from './types';\n\nconst logger = new Logger('koack:message-router:actions');\n\ntype ActionHandlersType = {\n  commands: Map<string, ActionType>,\n  regexps: Array<ActionType>,\n};\n\ntype ActionsMapType = {\n  dm: ActionHandlersType,\n  channel: ActionHandlersType,\n  group: ActionHandlersType,\n}\n\nexport default (actions: Array<ActionType>): ActionsMapType => {\n  const map: ActionsMapType = {\n    dm: { commands: new Map(), regexps: [] },\n    channel: { commands: new Map(), regexps: [] },\n    group: { commands: new Map(), regexps: [] },\n  };\n\n  actions.forEach((action: ActionType) => {\n    if (!action.where) action.where = ['dm', 'channel', 'group'];\n    if (!action.mention) action.mention = action.where.filter(v => v !== 'dm');\n    if (!action.handler) action.handler = compose(action.middlewares);\n    if (action.stop !== false) action.stop = true;\n\n    action.where.forEach((where) => {\n      const commands = map[where].commands;\n      const regexps = map[where].regexps;\n\n      if (action.commands) {\n        action.commands.forEach((command: string) => {\n          if (commands.has(command) && commands.get(command) !== action) {\n            logger.warn('override action', { command });\n          }\n\n          commands.get(where).set(command, action);\n        });\n      }\n\n      if (action.regexp || !action.commands) {\n        regexps.push(action);\n      }\n    });\n  });\n\n  return map;\n};\n"]}