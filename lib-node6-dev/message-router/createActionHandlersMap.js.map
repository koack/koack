{"version":3,"sources":["../../src/message-router/createActionHandlersMap.js"],"names":["logger","ActionHandlersType","commands","Map","regexps","ActionsMapType","dm","channel","group","actions","map","forEach","action","where","mention","filter","v","command","has","get","warn","set","regexp","push","handler","middlewares","stop"],"mappings":";;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA,MAAMA,SAAS,gCAAW,8BAAX,CAAf;;MAEKC,kB;AACHC,U,EAAUC,G;AACVC,S;;;MAGGC,c;AACHC,I,EAAIL,kB;AACJM,S,EAASN,kB;AACTO,O,EAAOP;;;kBAGM,iCAACQ,OAAD,EAAgD;AAAA,UAA/CA,OAA+C;;AAAA;AAC7D,UAAMC,MAAM;AACVJ,UAAI,EAAEJ,UAAU,IAAIC,GAAJ,EAAZ,EAAuBC,WAAvB,EADM;AAEVG,eAAS,EAAEL,UAAU,IAAIC,GAAJ,EAAZ,EAAuBC,WAAvB,EAFC;AAGVI,aAAO,EAAEN,UAAU,IAAIC,GAAJ,EAAZ,EAAuBC,WAAvB;AAHG,KAAZ;;AAMAK,YAAQE,OAAR,CAAiBC,MAAD,IAAwB;AAAA,cAAvBA,MAAuB;;AACtC,UAAI,CAACA,OAAOC,KAAZ,EAAmBD,OAAOC,KAAP;AACnB,UAAI,CAACD,OAAOE,OAAZ,EAAqBF,OAAOE,OAAP,GAAiBF,OAAOC,KAAP,CAAaE,MAAb,CAAoBC,KAAKA,MAAM,IAA/B,CAAjB;;AAErBJ,aAAOC,KAAP,CAAaF,OAAb,CAAsBE,KAAD,IAAW;AAC9B,cAAMX,WAAWQ,IAAIG,KAAJ,EAAWX,QAA5B;AACA,cAAME,UAAUM,IAAIG,KAAJ,EAAWT,OAA3B;;AAEA,YAAIQ,OAAOV,QAAX,EAAqB;AACnBU,iBAAOV,QAAP,CAAgBS,OAAhB,CAAyBM,OAAD,IAAqB;AAAA,oBAApBA,OAAoB;;AAC3C,gBAAIf,SAASgB,GAAT,CAAaD,OAAb,KAAyBf,SAASiB,GAAT,CAAaF,OAAb,MAA0BL,MAAvD,EAA+D;AAC7DZ,qBAAOoB,IAAP,CAAY,iBAAZ,EAA+B,EAAEH,OAAF,EAA/B;AACD;;AAEDf,qBAASiB,GAAT,CAAaN,KAAb,EAAoBQ,GAApB,CAAwBJ,OAAxB,EAAiCL,MAAjC;AACD,WAND;AAOD;;AAED,YAAIA,OAAOU,MAAP,IAAiB,CAACV,OAAOV,QAA7B,EAAuC;AACrCE,kBAAQmB,IAAR,CAAaX,MAAb;AACD;AACF,OAjBD;;AAmBA,UAAI,CAACA,OAAOY,OAAZ,EAAqBZ,OAAOY,OAAP,GAAiB,0BAAQZ,OAAOa,WAAf,CAAjB;;AAErB,UAAIb,OAAOc,IAAP,KAAgB,KAApB,EAA2B;AACzBd,eAAOc,IAAP,GAAc,IAAd;AACD;AACF,KA5BD;;AA8BA,WAAOhB,GAAP;AArC6D,kCAAlBL,cAAkB;AAsC9D,C","file":"createActionHandlersMap.js","sourcesContent":["import compose from 'koa-compose';\nimport Logger from 'nightingale-logger/src';\nimport type { ActionType } from '../types';\n\nconst logger = new Logger('koack:message-router:actions');\n\ntype ActionHandlersType = {\n  commands: Map<ActionType>,\n  regexps: Array<ActionType>,\n};\n\ntype ActionsMapType = {\n  dm: ActionHandlersType,\n  channel: ActionHandlersType,\n  group: ActionHandlersType,\n}\n\nexport default (actions: Array<ActionType>): ActionsMapType => {\n  const map = {\n    dm: { commands: new Map(), regexps: [] },\n    channel: { commands: new Map(), regexps: [] },\n    group: { commands: new Map(), regexps: [] },\n  };\n\n  actions.forEach((action: ActionType) => {\n    if (!action.where) action.where = ['dm', 'channel', 'group'];\n    if (!action.mention) action.mention = action.where.filter(v => v !== 'dm');\n\n    action.where.forEach((where) => {\n      const commands = map[where].commands;\n      const regexps = map[where].regexps;\n\n      if (action.commands) {\n        action.commands.forEach((command: string) => {\n          if (commands.has(command) && commands.get(command) !== action) {\n            logger.warn('override action', { command });\n          }\n\n          commands.get(where).set(command, action);\n        });\n      }\n\n      if (action.regexp || !action.commands) {\n        regexps.push(action);\n      }\n    });\n\n    if (!action.handler) action.handler = compose(action.middlewares);\n\n    if (action.stop !== false) {\n      action.stop = true;\n    }\n  });\n\n  return map;\n};\n"]}