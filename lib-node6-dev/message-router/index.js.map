{"version":3,"sources":["../../src/message-router/index.js"],"names":["logger","handle","ctx","message","action","extendsContext","messageCtx","Object","create","assign","context","_context","handler","canCommandHandleWithMention","hasMention","command","destinationType","mention","includes","actions","mentionOnly","every","map","next","event","text","botMention","rtm","activeUserId","ts","originalText","type","messageType","subtype","messageSubtype","teamId","userId","channelId","getChannelType","debug","warn","startsWith","substr","length","trim","replace","split","toLowerCase","actionCommand","commands","get","stop","regexps","some","match","regexp"],"mappings":"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","file":"index.js","sourcesContent":["import Logger from 'nightingale-logger/src';\nimport type { ActionType, MessageType } from '../types';\nimport createActionHandlersMap from './createActionHandlersMap';\n\nconst logger = new Logger('koack:message-router');\n\nconst handle = (ctx, message: MessageType, action: ActionType, extendsContext: Object) => {\n  let messageCtx = Object.create(ctx);\n\n  Object.assign(messageCtx, {\n    message,\n    ...extendsContext,\n    logger: ctx.logger.context({\n      ...ctx.logger._context,\n      message,\n    }),\n  });\n\n  action.handler(messageCtx);\n};\n\nconst canCommandHandleWithMention = (hasMention, command, destinationType) => {\n  if (!hasMention) {\n    if (command.mention === false) return true;\n    if (command.mention.includes(destinationType)) return false;\n  } else {\n    // if hasMention\n    // eslint-disable-next-line no-lonely-if\n    if (command.mention === false) return false;\n  }\n  return true;\n};\n\nexport default (actions: Array<ActionType>) => {\n  const mentionOnly = actions.every(action => action.mention === true);\n  const map = createActionHandlersMap(actions);\n\n  return (ctx, next) => {\n    if (!ctx.event.text) return;\n\n    const botMention = `<@${ctx.rtm.activeUserId}>`;\n\n    const { ts, text: originalText, type: messageType, subtype: messageSubtype } = ctx.event;\n    const { teamId, userId, channelId } = ctx;\n    const destinationType = ctx.getChannelType();\n    let text = originalText;\n\n    logger.debug('message', { ts, destinationType, text, messageType, messageSubtype });\n    if (!destinationType) {\n      logger.warn('Unsupported destination type', { destinationType });\n      return next();\n    }\n\n    const hasMention = text.startsWith(botMention);\n\n    if (mentionOnly && !hasMention) {\n      return next();\n    }\n\n    const message: MessageType = { ts, text: originalText, teamId, userId, channelId };\n\n    // Clean text\n    // Remove mention\n    if (hasMention) {\n      text = text.substr(botMention.length);\n    }\n\n    // remove `:` (`@bot: do something !`)\n    text = text.trim().replace(/^[\\s:]*(?!\\w)\\s*/, '');\n\n    // try to find a command\n    const command = text.split(' ', 2)[0].toLowerCase();\n    const actionCommand = command && map[destinationType].commands.get(command);\n\n    if (actionCommand && canCommandHandleWithMention(hasMention, actionCommand, destinationType)) {\n      text = text.substr(command.length).replace(/^[\\s:]*(?!\\w)\\s*/, '');\n\n      logger.debug('actionCommand', { command, text });\n\n      handle(ctx, message, actionCommand, { text });\n\n      if (actionCommand.stop) {\n        return;\n      }\n    }\n\n    // try to find a matching regexp\n    if (map[destinationType].regexps.some((action) => {\n      if (!canCommandHandleWithMention(hasMention, action, destinationType)) return false;\n\n      const match = !action.regexp ? true : text.match(action.regexp);\n      if (!match) return false;\n\n      logger.debug('actionRegexp', { text, match });\n      handle(ctx, message, action, { text, match });\n\n      return action.stop;\n    })) {\n      return;\n    }\n\n    // Could not find anything\n    return next();\n  };\n};\n"]}