{"version":3,"sources":["../../src/message-events-router/index.js"],"names":["logger","handle","ctx","messageEvent","eventHandler","messageCtx","Object","create","assign","context","_context","handler","actions","map","next","ts","subtype","messageType","event","teamId","userId","channelId","destinationType","getChannelType","debug","warn","get"],"mappings":";;;;;;;;;;;;AAAA;;;;AACA;;AACA;;;;;;AAEA,MAAMA,SAAS,gCAAW,6BAAX,CAAf;;AAEA,MAAMC,SAAS,CAACC,GAAD,EAAMC,YAAN,EAAsCC,YAAtC,KAAyE;AAAA,UAAnED,YAAmE;;AAAA,UAAnCC,YAAmC;;AACtF,MAAIC,aAAaC,OAAOC,MAAP,CAAcL,GAAd,CAAjB;;AAEAI,SAAOE,MAAP,CAAcH,UAAd,EAA0B;AACxBF,gBADwB;AAExBH,YAAQE,IAAIF,MAAJ,CAAWS,OAAX,cACHP,IAAIF,MAAJ,CAAWU,QADR;AAENP;AAFM;AAFgB,GAA1B;;AAQAC,eAAaO,OAAb,CAAqBN,UAArB;AACD,CAZD;;kBAce,6BAACO,OAAD,EAAsC;AAAA,UAArCA,OAAqC;;AACnD,QAAMC,MAAM,sCAAuBD,OAAvB,CAAZ;;AAEA,SAAO,CAACV,GAAD,EAAMY,IAAN,KAAe;AACpB,UAAM,EAAEC,EAAF,EAAMC,SAASC,WAAf,KAA+Bf,IAAIgB,KAAzC;AACA,QAAI,CAACD,WAAL,EAAkB,OAAOH,MAAP;;AAElB,UAAM,EAAEK,MAAF,EAAUC,MAAV,EAAkBC,SAAlB,KAAgCnB,GAAtC;AACA,UAAMoB,kBAAkBpB,IAAIqB,cAAJ,EAAxB;;AAEAvB,WAAOwB,KAAP,CAAa,eAAb,EAA8B,EAAET,EAAF,EAAMO,eAAN,EAAuBL,WAAvB,EAA9B;AACA,QAAI,CAACK,eAAL,EAAsB;AACpBtB,aAAOyB,IAAP,CAAY,8BAAZ,EAA4C,EAAEH,eAAF,EAA5C;AACA,aAAOR,MAAP;AACD;;AAED,UAAMV,eAAeS,IAAIS,eAAJ,EAAqBI,GAArB,CAAyBT,WAAzB,CAArB;AACA,QAAI,CAACb,YAAL,EAAmB,OAAOU,MAAP;;AAInBb,WAAOC,GAAP,EAFuC,EAAEa,EAAF,EAAMI,MAAN,EAAcC,MAAd,EAAsBC,SAAtB,EAEvC,EAA0BjB,YAA1B;AACD,GAnBD;AAoBD,C","file":"index.js","sourcesContent":["import Logger from 'nightingale-logger/src';\nimport type { EventHandlerType, MessageEventType } from './types';\nimport createEventHandlersMap from './createEventHandlersMap';\n\nconst logger = new Logger('koack:message-events-router');\n\nconst handle = (ctx, messageEvent: MessageEventType, eventHandler: EventHandlerType) => {\n  let messageCtx = Object.create(ctx);\n\n  Object.assign(messageCtx, {\n    messageEvent,\n    logger: ctx.logger.context({\n      ...ctx.logger._context,\n      messageEvent,\n    }),\n  });\n\n  eventHandler.handler(messageCtx);\n};\n\nexport default (actions: Array<EventHandlerType>) => {\n  const map = createEventHandlersMap(actions);\n\n  return (ctx, next) => {\n    const { ts, subtype: messageType } = ctx.event;\n    if (!messageType) return next();\n\n    const { teamId, userId, channelId } = ctx;\n    const destinationType = ctx.getChannelType();\n\n    logger.debug('message event', { ts, destinationType, messageType });\n    if (!destinationType) {\n      logger.warn('Unsupported destination type', { destinationType });\n      return next();\n    }\n\n    const eventHandler = map[destinationType].get(messageType);\n    if (!eventHandler) return next();\n\n    const messageEvent: MessageEventType = { ts, teamId, userId, channelId };\n\n    handle(ctx, messageEvent, eventHandler);\n  };\n};\n"]}