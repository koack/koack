{"version":3,"sources":["../../src/bot/Bot.js"],"names":["BotConstructorArguments","team","rtm","webClient","installerUsersWebClients","Map","logger","Bot","constructor","data","middlewares","Object","assign","use","middleware","debug","name","push","on","allMiddlewares","middlewareLength","length","callback","event","start","RTM","RTM_CONNECTION_OPENED","infoSuccess","process","send","close","removeAllListeners","disconnect"],"mappings":";;;;;;;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;MAEKA,uB;AACHC,M;AACAC,K;AACAC,W;AACAC,0B,0DAAiCC,G;;;;;;AAGnC,MAAMC,SAAS,gCAAW,WAAX,CAAf;;AAEe,MAAMC,GAAN,CAAU;;AAOvBC,cAAYC,IAAZ,EAA2C;AAAA,YAA/BA,IAA+B,EAAzBT,uBAAyB;;AAAA,SAF3CU,WAE2C;;AACzCC,WAAOC,MAAP,CAAc,IAAd,EAAoBH,IAApB;AACD;;AAEDI,MAAIC,UAAJ,EAAgC;AAAA,YAA5BA,UAA4B;;AAC9BR,WAAOS,KAAP,CAAa,gBAAb,EAA+B,EAAEC,MAAMF,WAAWE,IAAnB,EAA/B;AACA,SAAKN,WAAL,CAAiBO,IAAjB,CAAsBH,UAAtB;AACD;;AAEDI,KAAGF,IAAH,EAAiB,GAAGN,WAApB,EAAwD;AAAA,YAArDM,IAAqD;;AAAA,YAApCN,WAAoC;;AACtD,UAAMS,iBAAiB,CAAC,GAAG,KAAKT,WAAT,EAAsB,GAAGA,WAAzB,CAAvB;AACAJ,WAAOS,KAAP,CAAa,+BAAb,EAA8C,EAAEC,IAAF,EAAQI,kBAAkBD,eAAeE,MAAzC,EAA9C;AACA,UAAMC,WAAW,0BAAQH,cAAR,CAAjB;AACA,SAAKjB,GAAL,CAASgB,EAAT,CAAYF,IAAZ,EAAmBO,KAAD,IAAmB;AAAA,cAAlBA,KAAkB;;AACnCjB,aAAOS,KAAP,CAAa,OAAb,EAAsB,EAAEC,IAAF,EAAQO,KAAR,EAAtB;AACAD,eAAS,sCAAuB,IAAvB,EAA6BC,KAA7B,CAAT;AACD,KAHD;AAID;;AAEDC,UAAQ;AACN,SAAKtB,GAAL,CAASgB,EAAT,CAAY,sBAAcO,GAAd,CAAkBC,qBAA9B,EAAqD,MAAM;AACzDpB,aAAOqB,WAAP,CAAmB,mBAAnB;AACA,UAAIC,QAAQC,IAAZ,EAAkBD,QAAQC,IAAR,CAAa,OAAb;AACnB,KAHD;AAIA,SAAK3B,GAAL,CAASsB,KAAT;AACA,WAAO,IAAP;AACD;;AAEDM,UAAQ;AACN,SAAK5B,GAAL,CAAS6B,kBAAT;AACA,SAAK7B,GAAL,CAAS8B,UAAT;AACA,WAAO,KAAK9B,GAAZ;AACA,WAAO,KAAKC,SAAZ;AACA,WAAO,KAAKC,wBAAZ;AACD;AAzCsB;kBAAJG,G","file":"Bot.js","sourcesContent":["/* @flow */\nimport { RtmClient, WebClient, CLIENT_EVENTS } from '@slack/client';\nimport Logger from 'nightingale-logger/src';\nimport compose from 'koa-compose';\nimport createContextFromEvent from './createContextFromEvent';\nimport type { MiddlewareType } from './types';\nimport type { TeamType } from '../types';\n\ntype BotConstructorArguments = {|\n  team: ?TeamType,\n  rtm: RtmClient,\n  webClient: WebClient,\n  installerUsersWebClients: null | Map<string, WebClient>,\n|};\n\nconst logger = new Logger('koack:bot');\n\nexport default class Bot {\n  team: ?TeamType;\n  rtm: RtmClient;\n  webClient: WebClient;\n  installerUsersWebClients: null | Map<string, WebClient>;\n  middlewares: Array<MiddlewareType> = [];\n\n  constructor(data: BotConstructorArguments) {\n    Object.assign(this, data);\n  }\n\n  use(middleware: MiddlewareType) {\n    logger.debug('use middleware', { name: middleware.name });\n    this.middlewares.push(middleware);\n  }\n\n  on(name: string, ...middlewares: Array<MiddlewareType>) {\n    const allMiddlewares = [...this.middlewares, ...middlewares];\n    logger.debug('register middlewares on event', { name, middlewareLength: allMiddlewares.length });\n    const callback = compose(allMiddlewares);\n    this.rtm.on(name, (event: Object) => {\n      logger.debug('event', { name, event });\n      callback(createContextFromEvent(this, event));\n    });\n  }\n\n  start() {\n    this.rtm.on(CLIENT_EVENTS.RTM.RTM_CONNECTION_OPENED, () => {\n      logger.infoSuccess('connection opened');\n      if (process.send) process.send('ready');\n    });\n    this.rtm.start();\n    return this;\n  }\n\n  close() {\n    this.rtm.removeAllListeners();\n    this.rtm.disconnect();\n    delete this.rtm;\n    delete this.webClient;\n    delete this.installerUsersWebClients;\n  }\n}\n"]}