{"version":3,"sources":["../../src/bot/Bot.js"],"names":["logger","Bot","constructor","data","Object","assign","use","middleware","debug","name","middlewares","push","on","allMiddlewares","middlewareLength","length","callback","rtm","event","start","RTM","AUTHENTICATED","self","id","debugSuccess","RTM_CONNECTION_OPENED","infoSuccess","process","send","close","removeAllListeners","disconnect","webClient","installerUsersWebClients"],"mappings":";;;;;;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,sFAA+B,kCAC7B,uCAAM,+BAAC,mCAAD,CAAN,CAD6B,EAE7B,sCAAK,4CAAL,CAF6B,EAG7B,4CAAW,4CAAX,CAH6B,EAI7B,2DAA0B,0DAAO,iCAAI,8BAAJ,EAAY,4CAAZ,CAAP,CAA1B,CAJ6B,CAA/B;;AAOA,MAAMA,SAAS,gCAAW,WAAX,CAAf;;IAEqBC,G,0CACf,+BAAG,mCAAH,C;SACD,4C;;SACM,4C;;SACe,4BAAE,4BAAF,EAAS,iCAAI,8BAAJ,EAAY,4CAAZ,CAAT,C;2CACb,4BAAQ,yCAAR,C,0CAET,+BAAG,8BAAH,C,0CAEE,+BAAG,8BAAH,C,aATS,MAAU;AAMvB;AAKAC,cAAYC,IAAZ,EAA2C;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,wCAA3B,uBAA2B;;AACzCC,WAAOC,MAAP,CAAc,IAAd,EAAoBF,IAApB;AACD;AALD;;;AAOAG,MAAIC,UAAJ,EAAgC;AAAA,0BAAlB,yCAAkB;;AAAA;;AAC9BP,WAAOQ,KAAP,CAAa,gBAAb,EAA+B,EAAEC,MAAMF,WAAWE,IAAnB,EAA/B;AACA,SAAKC,WAAL,CAAiBC,IAAjB,CAAsBJ,UAAtB;AACD;;AAEDK,KAAGH,IAAH,EAAiB,GAAGC,WAApB,EAAwD;AAAA,oBAAjD,8BAAiD;;AAAA,2BAAzB,4BAAQ,yCAAR,CAAyB;;AAAA;;AAAA;;AACtD,UAAMG,iBAAiB,CAAC,GAAG,KAAKH,WAAT,EAAsB,GAAGA,WAAzB,CAAvB;AACAV,WAAOQ,KAAP,CAAa,+BAAb,EAA8C,EAAEC,IAAF,EAAQK,kBAAkBD,eAAeE,MAAzC,EAA9C;AACA,UAAMC,WAAW,0BAAQH,cAAR,CAAjB;AACA,SAAKI,GAAL,CAASL,EAAT,CAAYH,IAAZ,EAAmBS,KAAD,IAAmB;AAAA,uBAAb,8BAAa;;AAAA;;AACnClB,aAAOQ,KAAP,CAAa,OAAb,EAAsB,EAAEC,IAAF,EAAQS,KAAR,EAAtB;AACAF,eAAS,sCAAuB,IAAvB,EAA6BE,KAA7B,CAAT;AACD,KAHD;AAID;;AAEDC,UAAQ;AACN,SAAKF,GAAL,CAASL,EAAT,CAAY,sBAAcQ,GAAd,CAAkBC,aAA9B,EAA6C,CAAC,EAAEC,IAAF,EAAD,KAAc;AACzD,WAAKC,EAAL,GAAUD,KAAKC,EAAf;AACA,WAAKd,IAAL,GAAYa,KAAKb,IAAjB;AACAT,aAAOwB,YAAP,CAAoB,eAApB,EAAqC,EAAED,IAAID,KAAKC,EAAX,EAAed,MAAMa,KAAKb,IAA1B,EAArC;AACD,KAJD;AAKA,SAAKQ,GAAL,CAASL,EAAT,CAAY,sBAAcQ,GAAd,CAAkBK,qBAA9B,EAAqD,MAAM;AACzDzB,aAAO0B,WAAP,CAAmB,mBAAnB,EAAwC,EAAEH,IAAI,KAAKA,EAAX,EAAed,MAAM,KAAKA,IAA1B,EAAxC;AACA,UAAIkB,QAAQC,IAAZ,EAAkBD,QAAQC,IAAR,CAAa,OAAb;AACnB,KAHD;AAIA,SAAKX,GAAL,CAASE,KAAT;AACA,WAAO,IAAP;AACD;;AAEDU,UAAQ;AACN,SAAKZ,GAAL,CAASa,kBAAT;AACA,SAAKb,GAAL,CAASc,UAAT;AACA,WAAO,KAAKd,GAAZ;AACA,WAAO,KAAKe,SAAZ;AACA,WAAO,KAAKC,wBAAZ;AACD;AAlDsB,C;;;;;;;;;;;;;;;;;;;;;;;;kBAAJhC,G","file":"Bot.js","sourcesContent":["/* @flow */\nimport { RtmClient, WebClient, CLIENT_EVENTS } from '@slack/client';\nimport Logger from 'nightingale-logger/src';\nimport compose from 'koa-compose';\nimport createContextFromEvent from './context/createContextFromEvent';\nimport type { MiddlewareType } from './types';\nimport type { TeamType } from '../types';\n\ntype BotConstructorArguments = {|\n  team: ?TeamType,\n  rtm: RtmClient,\n  webClient: WebClient,\n  installerUsersWebClients: null | Map<string, WebClient>,\n|};\n\nconst logger = new Logger('koack:bot');\n\nexport default class Bot {\n  team: ?TeamType;\n  rtm: RtmClient;\n  webClient: WebClient;\n  installerUsersWebClients: null | Map<string, WebClient>;\n  middlewares: Array<MiddlewareType> = [];\n  /** bot id in the team */\n  id: ?string;\n  /** bot name in the team */\n  name: ?string;\n\n  constructor(data: BotConstructorArguments) {\n    Object.assign(this, data);\n  }\n\n  use(middleware: MiddlewareType) {\n    logger.debug('use middleware', { name: middleware.name });\n    this.middlewares.push(middleware);\n  }\n\n  on(name: string, ...middlewares: Array<MiddlewareType>) {\n    const allMiddlewares = [...this.middlewares, ...middlewares];\n    logger.debug('register middlewares on event', { name, middlewareLength: allMiddlewares.length });\n    const callback = compose(allMiddlewares);\n    this.rtm.on(name, (event: Object) => {\n      logger.debug('event', { name, event });\n      callback(createContextFromEvent(this, event));\n    });\n  }\n\n  start() {\n    this.rtm.on(CLIENT_EVENTS.RTM.AUTHENTICATED, ({ self }) => {\n      this.id = self.id;\n      this.name = self.name;\n      logger.debugSuccess('authenticated', { id: self.id, name: self.name });\n    });\n    this.rtm.on(CLIENT_EVENTS.RTM.RTM_CONNECTION_OPENED, () => {\n      logger.infoSuccess('connection opened', { id: this.id, name: this.name });\n      if (process.send) process.send('ready');\n    });\n    this.rtm.start();\n    return this;\n  }\n\n  close() {\n    this.rtm.removeAllListeners();\n    this.rtm.disconnect();\n    delete this.rtm;\n    delete this.webClient;\n    delete this.installerUsersWebClients;\n  }\n}\n"]}