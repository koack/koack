{"version":3,"sources":["../../src/bot/Bot.js"],"names":["BotConstructorArguments","team","rtm","webClient","installerUsersWebClients","Map","logger","Bot","constructor","data","middlewares","Object","assign","context","create","use","middleware","debug","name","push","on","callback","event","createContext","ctx","bot","teamId","userId","user","channelId","channel","setContext","text","close","removeAllListeners","disconnect"],"mappings":";;;;;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;MAEKA,uB;AACHC,M;AACAC,K;AACAC,W;AACAC,0B,0DAAiCC,G;;;;;;AAGnC,MAAMC,SAAS,gCAAW,WAAX,CAAf;;AAEe,MAAMC,GAAN,CAAU;;AAOvBC,cAAYC,IAAZ,EAA2C;AAAA,YAA/BA,IAA+B,EAAzBT,uBAAyB;;AAAA,SAF3CU,WAE2C;;AACzCC,WAAOC,MAAP,CAAc,IAAd,EAAoBH,IAApB;AACA,SAAKI,OAAL,GAAeF,OAAOG,MAAP,4BAAf;AACD;;AAEDC,MAAIC,UAAJ,EAAgC;AAAA,YAA5BA,UAA4B;;AAC9BV,WAAOW,KAAP,CAAa,gBAAb,EAA+B,EAAEC,MAAMF,WAAWE,IAAnB,EAA/B;AACA,SAAKR,WAAL,CAAiBS,IAAjB,CAAsBH,UAAtB;AACD;;AAEDI,KAAGF,IAAH,EAAiB,GAAGR,WAApB,EAAwD;AAAA,YAArDQ,IAAqD;;AAAA,YAApCR,WAAoC;;AACtDJ,WAAOW,KAAP,CAAa,+BAAb,EAA8C,EAAEC,IAAF,EAA9C;AACA,UAAMG,WAAW,0BAAQ,CAAC,GAAG,KAAKX,WAAT,EAAsB,GAAGA,WAAzB,CAAR,CAAjB;AACA,SAAKR,GAAL,CAASkB,EAAT,CAAYF,IAAZ,EAAkBI,SAASD,SAAS,KAAKE,aAAL,CAAmBD,KAAnB,CAAT,CAA3B;AACD;;AAEDC,gBAAcD,KAAd,EAAkC;AAAA;AAChC,YAAME,MAAMb,OAAOG,MAAP,4BAAZ;;AAEAH,aAAOC,MAAP,CAAcY,GAAd,EAAmB;AACjBC,aAAK,IADY;AAEjBvB,aAAK,KAAKA,GAFO;AAGjBC,mBAAW,KAAKA,SAHC;AAIjBmB,aAJiB;AAKjBI,gBAAQJ,MAAMrB,IALG;AAMjB0B,gBAAQL,MAAMM,IANG;AAOjBC,mBAAWP,MAAMQ;AAPA,OAAnB;;AAUAN,UAAIlB,MAAJ,GAAa,gCAAW,KAAX,CAAb;AACAkB,UAAIlB,MAAJ,CAAWyB,UAAX,CAAsB;AACpB9B,cAAM,KAAKA,IADS;AAEpB2B,cAAMJ,IAAII,IAAJ,IAAYJ,IAAII,IAAJ,CAASV,IAFP;AAGpBc,cAAMV,MAAMU;AAHQ,OAAtB;;AAMA,aAAOR,GAAP;AApBgC;AAqBjC;;AAEDS,UAAQ;AACN,SAAK/B,GAAL,CAASgC,kBAAT;AACA,SAAKhC,GAAL,CAASiC,UAAT;AACA,WAAO,KAAKjC,GAAZ;AACA,WAAO,KAAKC,SAAZ;AACA,WAAO,KAAKC,wBAAZ;AACD;AApDsB;kBAAJG,G","file":"Bot.js","sourcesContent":["import { RtmClient, WebClient } from '@slack/client';\nimport Logger from 'nightingale-logger/src';\nimport compose from 'koa-compose';\nimport contextPrototype from './contextPrototype';\nimport type { MiddlewareType, ContextType } from './types';\nimport type { TeamType } from '../types';\n\ntype BotConstructorArguments = {|\n  team: TeamType,\n  rtm: RtmClient,\n  webClient: WebClient,\n  installerUsersWebClients: null | Map<string, WebClient>,\n|};\n\nconst logger = new Logger('koack:bot');\n\nexport default class Bot {\n  team: TeamType;\n  rtm: RtmClient;\n  webClient: WebClient;\n  installerUsersWebClients: null | Map<string, WebClient>;\n  middlewares: Array<MiddlewareType> = [];\n\n  constructor(data: BotConstructorArguments) {\n    Object.assign(this, data);\n    this.context = Object.create(contextPrototype);\n  }\n\n  use(middleware: MiddlewareType) {\n    logger.debug('use middleware', { name: middleware.name });\n    this.middlewares.push(middleware);\n  }\n\n  on(name: string, ...middlewares: Array<MiddlewareType>) {\n    logger.debug('register middlewares on event', { name });\n    const callback = compose([...this.middlewares, ...middlewares]);\n    this.rtm.on(name, event => callback(this.createContext(event)));\n  }\n\n  createContext(event): ContextType {\n    const ctx = Object.create(contextPrototype);\n\n    Object.assign(ctx, {\n      bot: this,\n      rtm: this.rtm,\n      webClient: this.webClient,\n      event,\n      teamId: event.team,\n      userId: event.user,\n      channelId: event.channel,\n    });\n\n    ctx.logger = new Logger('bot');\n    ctx.logger.setContext({\n      team: this.team,\n      user: ctx.user && ctx.user.name,\n      text: event.text,\n    });\n\n    return ctx;\n  }\n\n  close() {\n    this.rtm.removeAllListeners();\n    this.rtm.disconnect();\n    delete this.rtm;\n    delete this.webClient;\n    delete this.installerUsersWebClients;\n  }\n}\n"]}