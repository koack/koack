{"version":3,"sources":["../../src/bot/Bot.js"],"names":["logger","Bot","constructor","data","internalEventEmitter","Object","assign","_ctx","use","middleware","debug","name","middlewares","push","on","allMiddlewares","middlewareLength","length","callback","toString","rtm","event","messageReceived","type","ctx","emit","start","RTM","AUTHENTICATED","self","id","debugSuccess","RTM_CONNECTION_OPENED","infoSuccess","process","send","close","removeAllListeners","disconnect","webClient","installerUsersWebClients"],"mappings":"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","file":"Bot.js","sourcesContent":["/* @flow */\nimport { RtmClient, WebClient, CLIENT_EVENTS } from '@slack/client';\nimport Logger from 'nightingale-logger';\nimport compose from 'koa-compose';\nimport { EventEmitter } from 'events';\nimport createContextFromBot from './context/createContextFromBot';\nimport createContextFromEvent from './context/createContextFromEvent';\nimport createContextFromHttp from './context/createContextFromInteractiveMessageResponse';\nimport type { MiddlewareType } from './types';\nimport type { TeamType } from '../types';\nimport { INTERACTIVE_MESSAGE_RESPONSE } from '../index';\n\ntype BotConstructorArguments = {|\n  team: ?TeamType,\n  rtm: RtmClient,\n  webClient: WebClient,\n  installerUsersWebClients: null | Map<string, WebClient>,\n|};\n\nconst logger = new Logger('koack:bot');\n\nexport default class Bot {\n  team: ?TeamType;\n  rtm: RtmClient;\n  webClient: WebClient;\n  installerUsersWebClients: null | Map<string, WebClient>;\n  middlewares: Array<MiddlewareType> = [];\n  /** bot id in the team */\n  id: ?string;\n  /** bot name in the team */\n  name: ?string;\n  internalEventEmitter = new EventEmitter();\n\n  constructor(data: BotConstructorArguments) {\n    Object.assign(this, data);\n    this._ctx = createContextFromBot(this);\n  }\n\n  use(middleware: MiddlewareType) {\n    logger.debug('use middleware', { name: middleware.name });\n    this.middlewares.push(middleware);\n  }\n\n  on(name: string | any, ...middlewares: Array<MiddlewareType>) {\n    const allMiddlewares = [...this.middlewares, ...middlewares];\n    logger.debug('register middlewares on event', { name, middlewareLength: allMiddlewares.length });\n    const callback = compose(allMiddlewares);\n\n    if (typeof name === 'symbol') {\n      this.internalEventEmitter.on(name.toString(), callback);\n      return;\n    }\n\n    this.rtm.on(name, (event: Object) => {\n      logger.debug('event', { name, event });\n      callback(createContextFromEvent(this._ctx, event));\n    });\n  }\n\n  messageReceived({ type, name, data }) {\n    if (type === 'event') {\n      if (name === INTERACTIVE_MESSAGE_RESPONSE.toString()) {\n        const ctx = createContextFromHttp(this._ctx, data);\n        this.internalEventEmitter.emit(name, ctx);\n      }\n    }\n  }\n\n  start() {\n    this.rtm.on(CLIENT_EVENTS.RTM.AUTHENTICATED, ({ self }) => {\n      this.id = self.id;\n      this.name = self.name;\n      logger.debugSuccess('authenticated', { id: self.id, name: self.name });\n    });\n    this.rtm.on(CLIENT_EVENTS.RTM.RTM_CONNECTION_OPENED, () => {\n      logger.infoSuccess('connection opened', { id: this.id, name: this.name });\n      if (process.send) process.send('ready');\n    });\n    this.rtm.start();\n    return this;\n  }\n\n  close() {\n    this.rtm.removeAllListeners();\n    this.rtm.disconnect();\n    delete this.rtm;\n    delete this.webClient;\n    delete this.installerUsersWebClients;\n  }\n}\n"]}