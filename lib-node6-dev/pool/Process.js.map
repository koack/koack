{"version":3,"sources":["../../src/pool/Process.js"],"names":["Process","constructor","pool","id","processNextId","teams","Map","start","childProcess","Error","path","require","resolve","env","process","CHILD_ID","kill","Promise","once","canAddTeam","size","startTeam","team","set","teamsToProcess","send","type","killTeam","killProcessIfEmpty","teamId","delete","processes","replaceTeam","sendMessage","data"],"mappings":";;;;;;;;;;;;AACA;;AAEA;;;;AACA;;;;AAEe,MAAMA,OAAN,CAAc;;AAM3BC,cAAYC,IAAZ,EAAwB;AAAA,YAAZA,IAAY;;AACtB,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,EAAL,GAAUD,KAAKE,aAAL,EAAV;AACA,SAAKC,KAAL,GAAa,IAAIC,GAAJ,EAAb;AACD;;AAEDC,UAAQ;AACN,QAAI,KAAKC,YAAT,EAAuB;AACrB,YAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAED,UAAMC,eAAe,KAAKR,IAAL,CAAUQ,IAAzB,uCAAN;AACA,SAAKF,YAAL,GAAoB,yBAAKG,QAAQC,OAAR,CAAgB,eAAhB,CAAL,EAAuC,CAAC,KAAKT,EAAN,EAAUO,IAAV,CAAvC,EAAwD;AAC1EG,wBACKC,QAAQD,GADb;AAEEE,kBAAU,KAAKZ;AAFjB;AAD0E,KAAxD,CAApB;AAMD;;AAEDa,SAAO;AACL,QAAI,CAAC,KAAKR,YAAV,EAAwB;AACxB,WAAO,IAAIS,OAAJ,CAAYL,WAAW;AAC5B,WAAKJ,YAAL,CAAkBU,IAAlB,CAAuB,MAAvB,EAA+B,MAAMN,SAArC;AACA,WAAKJ,YAAL,CAAkBQ,IAAlB;AACA,aAAO,KAAKR,YAAZ;AACD,KAJM,CAAP;AAKD;;AAEDW,eAAa;AACX,WAAO,KAAKd,KAAL,CAAWe,IAAX,GAAkB,KAAKlB,IAAL,CAAUkB,IAAnC;AACD;;AAEDC,YAAUC,IAAV,EAA0B;AAAA,YAAhBA,IAAgB;;AACxB,QAAI,CAAC,KAAKd,YAAV,EAAwB;AACtB,YAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACD;;AAED,SAAKJ,KAAL,CAAWkB,GAAX,CAAeD,KAAKnB,EAApB,EAAwBmB,IAAxB;AACA,SAAKpB,IAAL,CAAUsB,cAAV,CAAyBD,GAAzB,CAA6BD,KAAKnB,EAAlC,EAAsC,IAAtC;;AAEA,SAAKK,YAAL,CAAkBiB,IAAlB,CAAuB,EAAEC,MAAM,OAAR,EAAiBJ,IAAjB,EAAvB;AACD;;AAEDK,WAASL,IAAT,EAAyBM,qBAA8B,IAAvD,EAA6D;AAAA,YAApDN,IAAoD;;AAAA,YAApCM,kBAAoC;;AAC3D,QAAI,CAAC,KAAKpB,YAAV,EAAwB;AACtB,YAAM,IAAIC,KAAJ,CAAU,wCAAV,CAAN;AACD;;AAED,SAAKD,YAAL,CAAkBiB,IAAlB,CAAuB,EAAEC,MAAM,QAAR,EAAkBG,QAAQP,KAAKnB,EAA/B,EAAvB;AACA,SAAKE,KAAL,CAAWyB,MAAX,CAAkBR,KAAKnB,EAAvB;AACA,SAAKD,IAAL,CAAUsB,cAAV,CAAyBM,MAAzB,CAAgCR,KAAKnB,EAArC;;AAEA,QAAIyB,sBAAsB,KAAKvB,KAAL,CAAWe,IAAX,KAAoB,CAA9C,EAAiD;AAC/C,WAAKJ,IAAL;AACA,WAAKd,IAAL,CAAU6B,SAAV,CAAoBD,MAApB,CAA2B,IAA3B;AACD;AACF;;AAEDE,cAAYV,IAAZ,EAA4B;AAAA,YAAhBA,IAAgB;;AAC1B,SAAKK,QAAL,CAAcL,IAAd,EAAoB,KAApB;AACA,SAAKD,SAAL,CAAeC,IAAf;AACD;;AAEDW,cAAYJ,MAAZ,EAA4BK,IAA5B,EAA0C;AAAA,YAA9BL,MAA8B;;AAAA,YAAdK,IAAc;;AACxC,QAAI,CAAC,KAAK1B,YAAV,EAAwB;AACtB,YAAM,IAAIC,KAAJ,CAAU,2CAAV,CAAN;AACD;;AAED,SAAKD,YAAL,CAAkBiB,IAAlB,YAAyBC,MAAM,SAA/B,EAA0CG,MAA1C,IAAqDK,IAArD;AACD;AA5E0B;kBAARlC,O","file":"Process.js","sourcesContent":["/* @flow */\nimport { fork } from 'child_process';\nimport type { ChildProcess } from 'child_process';\nimport Pool from './index';\nimport type { TeamType } from '../../src/types';\n\nexport default class Process {\n  pool: Pool;\n  id: number;\n  teams: Map<any, TeamType>;\n  childProcess: ?ChildProcess;\n\n  constructor(pool: Pool) {\n    this.pool = pool;\n    this.id = pool.processNextId++;\n    this.teams = new Map();\n  }\n\n  start() {\n    if (this.childProcess) {\n      throw new Error('Already started');\n    }\n\n    const path: string = this.pool.path;\n    this.childProcess = fork(require.resolve('./bot-process'), [this.id, path], {\n      env: {\n        ...process.env,\n        CHILD_ID: this.id,\n      },\n    });\n  }\n\n  kill() {\n    if (!this.childProcess) return;\n    return new Promise(resolve => {\n      this.childProcess.once('exit', () => resolve());\n      this.childProcess.kill();\n      delete this.childProcess;\n    });\n  }\n\n  canAddTeam() {\n    return this.teams.size < this.pool.size;\n  }\n\n  startTeam(team: TeamType) {\n    if (!this.childProcess) {\n      throw new Error('Cannot start a new team in a killed process');\n    }\n\n    this.teams.set(team.id, team);\n    this.pool.teamsToProcess.set(team.id, this);\n\n    this.childProcess.send({ type: 'start', team });\n  }\n\n  killTeam(team: TeamType, killProcessIfEmpty: boolean = true) {\n    if (!this.childProcess) {\n      throw new Error('Cannot kill a team in a killed process');\n    }\n\n    this.childProcess.send({ type: 'remove', teamId: team.id });\n    this.teams.delete(team.id);\n    this.pool.teamsToProcess.delete(team.id);\n\n    if (killProcessIfEmpty && this.teams.size === 0) {\n      this.kill();\n      this.pool.processes.delete(this);\n    }\n  }\n\n  replaceTeam(team: TeamType) {\n    this.killTeam(team, false);\n    this.startTeam(team);\n  }\n\n  sendMessage(teamId: number, data: Object) {\n    if (!this.childProcess) {\n      throw new Error('Cannot send a message in a killed process');\n    }\n\n    this.childProcess.send({ type: 'message', teamId, ...data });\n  }\n}\n"]}