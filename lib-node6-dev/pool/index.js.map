{"version":3,"sources":["../../src/pool/index.js"],"names":["logger","PoolOptionsType","size","path","Pool","constructor","options","processNextId","processes","Set","teamsToProcess","Map","Object","assign","addTeam","team","sendBotMessage","teamId","data","process","get","warn","sendMessage","close","clear","promises","Array","from","map","Promise","resolve","kill","once","all"],"mappings":";;;;;;;;;;AACA;;;;AACA;;;;AACA;;;;AAEA,MAAMA,SAAS,0BAAW,YAAX,CAAf;;MAEKC,e;AACHC,M;AACAC,M;;;;;;AAGa,MAAMC,IAAN,CAAW;;AAOxBC,cAAYC,OAAZ,EAAsC;AAAA,YAA1BA,OAA0B,EAAjBL,eAAiB;;AAAA,SAJtCM,aAIsC,GAJtB,CAIsB;AAAA,SAHtCC,SAGsC,GAH1B,IAAIC,GAAJ,EAG0B;AAAA,SAFtCC,cAEsC,GAFrB,IAAIC,GAAJ,EAEqB;;AACpCC,WAAOC,MAAP,CAAc,IAAd,EAAoBP,OAApB;AACD;;AAEDQ,UAAQC,IAAR,EAAwB;AAAA,YAAhBA,IAAgB;;AACtB,4BAAS,IAAT,EAAeA,IAAf;AACD;;AAEDC,iBAAeC,MAAf,EAA+BC,IAA/B,EAA6C;AAAA,YAA9BD,MAA8B;;AAAA,YAAdC,IAAc;;AAC3C,UAAMC,UAAU,KAAKT,cAAL,CAAoBU,GAApB,CAAwBH,MAAxB,CAAhB;AACA,QAAI,CAACE,OAAL,EAAc;AACZnB,aAAOqB,IAAP,CAAY,SAAZ,EAAuB,EAAEJ,MAAF,EAAvB;AACA;AACD;AACDE,YAAQG,WAAR,CAAoBL,MAApB,EAA4BC,IAA5B;AACD;;AAEDK,UAAQ;AACN,WAAO,KAAKC,KAAL,EAAP;AACD;;AAEDA,UAAQ;AACN,UAAMC,WAAWC,MAAMC,IAAN,CAAW,KAAKnB,SAAhB,EAA2BoB,GAA3B,CAA+BT,WAC9C,IAAIU,OAAJ,CAAYC,WAAW;AACrBX,cAAQY,IAAR;AACAZ,cAAQa,IAAR,CAAa,MAAb,EAAqB,MAAMF,SAA3B;AACD,KAHD,CADe,CAAjB;AAMA,SAAKtB,SAAL,CAAegB,KAAf;AACA,SAAKd,cAAL,CAAoBc,KAApB;AACA,SAAKjB,aAAL,GAAqB,CAArB;AACA,WAAOsB,QAAQI,GAAR,CAAYR,QAAZ,CAAP;AACD;AAvCuB;kBAALrB,I","file":"index.js","sourcesContent":["/* @flow */\nimport Logger from 'nightingale/src';\nimport startBot from './startBot';\nimport type { TeamType } from '../types/';\n\nconst logger = new Logger('koack:pool');\n\ntype PoolOptionsType = {|\n  size: number,\n  path: string,\n|};\n\nexport default class Pool {\n  size: number;\n  path: string;\n  processNextId = 1;\n  processes = new Set();\n  teamsToProcess = new Map();\n\n  constructor(options: PoolOptionsType) {\n    Object.assign(this, options);\n  }\n\n  addTeam(team: TeamType) {\n    startBot(this, team);\n  }\n\n  sendBotMessage(teamId: number, data: Object) {\n    const process = this.teamsToProcess.get(teamId);\n    if (!process) {\n      logger.warn('No team', { teamId });\n      return;\n    }\n    process.sendMessage(teamId, data);\n  }\n\n  close() {\n    return this.clear();\n  }\n\n  clear() {\n    const promises = Array.from(this.processes).map(process => (\n      new Promise(resolve => {\n        process.kill();\n        process.once('exit', () => resolve());\n      })\n    ));\n    this.processes.clear();\n    this.teamsToProcess.clear();\n    this.processNextId = 1;\n    return Promise.all(promises);\n  }\n}\n"]}