{"version":3,"sources":["../../src/server/index.js"],"names":["SlackClientConfigType","clientID","clientSecret","SlackServerConfigType","slackClient","pool","storage","scopes","ListenConfigType","tls","socketPath","port","hostname","SlackServer","constructor","config","Object","assign","slackActions","client","callbackUrl","successUrl","callback","installInfo","team","installedTeam","addTeam","emit","use","get","authorize","ctx","body","listen","certificatesDirname","forEach","stop","close"],"mappings":";;;;;;;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;;AAFA;;;MAIKA,qB;AACHC,U;AACAC,c;;;;;;MAGGC,qB;AACHC,a,EAAaJ,qB;AACbK,M;AACAC,S;AACAC,Q;;;;;;MAGGC,gB;AACHC,K;AACAC,Y;AACAC,M;AACAC,U;;;;;;AAGa,MAAMC,WAAN,uBAA8B;;AAM3CC,cAAYC,MAAZ,EAA2C;AAAA;;AAAA,YAA/BA,MAA+B,EAAvBZ,qBAAuB;;AACzC;AACAa,WAAOC,MAAP,CAAc,IAAd,EAAoBF,MAApB;AACA;;AAEA,UAAMG,eAAe,qBAAmB;AACtCC,cAAQJ,OAAOX,WADuB;AAEtCG,cAAQQ,OAAOR,MAFuB;AAGtCa,mBAAa,WAHyB;AAItCC,kBAAY,UAJ0B;AAKtCC;AAAA,qCAAU,WAAOC,WAAP,EAAuB;AAC/B,gBAAMC,gBAAiB,MAAM,MAAKlB,OAAL,CAAamB,aAAb,CAA2BF,WAA3B,CAAvB,2BAAN;AACA,gBAAKlB,IAAL,CAAUqB,OAAV,CAAkBF,IAAlB;AACA,gBAAKG,IAAL,CAAU,WAAV,EAAuBJ,WAAvB;AACD,SAJD;;AAAA;AAAA;AAAA;AAAA;AALsC,KAAnB,CAArB;;AAYA,SAAKK,GAAL,CAAS,mBAAEC,GAAF,CAAM,GAAN,EAAWX,aAAaY,SAAxB,CAAT;AACA,SAAKF,GAAL,CAAS,mBAAEC,GAAF,CAAM,WAAN,EAAmBX,aAAaI,QAAhC,CAAT;AACA,SAAKM,GAAL,CAAS,mBAAEC,GAAF,CAAM,UAAN,EAAkBE,OAAOA,IAAIC,IAAJ,GAAW,YAApC,CAAT;AACD;;AAEDC,SAAOlB,MAAP,EAAiCmB,mBAAjC,EAA+D;AAAA,YAAxDnB,MAAwD,EAAhDP,gBAAgD;;AAAA,YAA9B0B,mBAA8B;;AAC7D,SAAKnB,MAAL,GAAc,0BAAWA,MAAX,CAAd;AACA,6BAAUmB,mBAAV,EAA+B,IAA/B;AACA,SAAK5B,OAAL,CAAa6B,OAAb,CAAsBX,IAAD;AAAA,cAACA,IAAD;;AAAA,aAAoB,KAAKnB,IAAL,CAAUqB,OAAV,CAAkBF,IAAlB,CAApB;AAAA,KAArB;AACD;;AAEDY,SAAO;AACL,WAAO,KAAK/B,IAAL,CAAUgC,KAAV,EAAP;AACD;AApC0C;kBAAxBxB,W","file":"index.js","sourcesContent":["/* @flow */\nimport Koa from 'koa';\nimport _ from 'koa-route';\nimport alplisten from 'alp-listen';\nimport object2map from 'object2map';\nimport Pool from '../../src/pool';\n// import bodyParser from 'koa-bodyparser';\nimport createSlackActions from './slack';\nimport type { StorageType, TeamType } from '../types/index';\n\ntype SlackClientConfigType = {|\n  clientID: string,\n  clientSecret: string,\n|};\n\ntype SlackServerConfigType = {|\n  slackClient: SlackClientConfigType,\n  pool: Pool,\n  storage: StorageType,\n  scopes: Array<string>,\n|};\n\ntype ListenConfigType = {|\n  tls: ?boolean,\n  socketPath: ?string,\n  port: ?number,\n  hostname: ?string,\n|};\n\nexport default class SlackServer extends Koa {\n  slackClient: SlackClientConfigType;\n  pool: Pool;\n  storage: StorageType;\n  scopes: Array<string>;\n\n  constructor(config: SlackServerConfigType) {\n    super();\n    Object.assign(this, config);\n    // this.use(bodyParser());\n\n    const slackActions = createSlackActions({\n      client: config.slackClient,\n      scopes: config.scopes,\n      callbackUrl: '/callback',\n      successUrl: '/success',\n      callback: async (installInfo) => {\n        const team: TeamType = await this.storage.installedTeam(installInfo);\n        this.pool.addTeam(team);\n        this.emit('installed', installInfo);\n      },\n    });\n\n    this.use(_.get('/', slackActions.authorize));\n    this.use(_.get('/callback', slackActions.callback));\n    this.use(_.get('/success', ctx => ctx.body = 'Youhou !!!'));\n  }\n\n  listen(config: ListenConfigType, certificatesDirname: ?string) {\n    this.config = object2map(config);\n    alplisten(certificatesDirname)(this);\n    this.storage.forEach((team: TeamType) => this.pool.addTeam(team));\n  }\n\n  stop() {\n    return this.pool.close();\n  }\n}\n"]}