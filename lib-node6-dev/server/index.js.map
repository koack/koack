{"version":3,"sources":["../../src/server/index.js"],"names":["SlackServer","constructor","pool","storage","slackClient","scopes","callbackUrl","redirectUrl","slackActions","client","callback","installInfo","installedTeam","addTeam","team","emit","registerGet","authorize","url","use","get","registerPost","post","listen","config","certificatesDirname","forEach","stop","close"],"mappings":";;;;;;;;AAMA;;;AALA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,kFAA6B,kCAC3B,2CAAU,8BAAV,CAD2B,EAE3B,+CAAc,8BAAd,CAF2B,CAA7B;;AAKA,kFAA6B,kCAC3B,8CAAa,qBAAb,CAD2B,EAE3B,uCAAM,yCAAN,CAF2B,EAG3B,0CAAS,sCAAT,CAH2B,EAI3B,yCAAQ,4BAAM,8BAAN,CAAR,CAJ2B,EAK3B,8CAAa,+BAAC,8BAAD,CAAb,CAL2B,EAM3B,8CAAa,+BAAC,8BAAD,CAAb,CAN2B,CAA7B;;AASA,wEAAwB,kCACtB,sCAAK,+BAAC,+BAAD,CAAL,CADsB,EAEtB,6CAAY,+BAAC,8BAAD,CAAZ,CAFsB,EAGtB,uCAAM,+BAAC,8BAAD,CAAN,CAHsB,EAItB,2CAAU,+BAAC,8BAAD,CAAV,CAJsB,CAAxB;;IAOqBA,W;SACf,yC;2CACG,sC,aAFM,4BAA8B;;AAI3CC,cAAY;AACVC,QADU;AAEVC,WAFU;AAGVC,eAHU;AAIVC,UAJU;AAKVC,kBAAc,WALJ;AAMVC,kBAAc;AANJ,GAAZ,EAO0B;AAAA;;AAAA,gDAAzB,qBAAyB;;AACxB;;AADwB;;AAAA;;AAExB,SAAKL,IAAL,GAAYA,IAAZ;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA;;AAEA,UAAMK,eAAe,qBAAmB;AACtCC,cAAQL,WAD8B;AAEtCC,YAFsC;AAGtCC,iBAHsC;AAItCC,iBAJsC;AAKtCG;AAAA,qCAAU,WAAOC,WAAP,EAAuB;AAC/B,uBAAU,mCAAV,SAAuB,MAAM,MAAKR,OAAL,CAAaS,aAAb,CAA2BD,WAA3B,CAA7B;AACA,gBAAKT,IAAL,CAAUW,OAAV,CAAkBC,IAAlB;AACA,gBAAKC,IAAL,CAAU,WAAV,EAAuBJ,WAAvB;AACD,SAJD;;AAAA;AAAA;AAAA;AAAA;AALsC,KAAnB,CAArB;;AAYA,SAAKK,WAAL,CAAiB,GAAjB,EAAsBR,aAAaS,SAAnC;AACA,SAAKD,WAAL,CAAiBV,WAAjB,EAA8BE,aAAaE,QAA3C;AACD;;AAEDM,cAAYE,GAAZ,EAAyBR,QAAzB,EAA6C;AAAA,mBAA9B,8BAA8B;;AAAA,wBAAZ,gCAAY;;AAAA;;AAAA;;AAC3C,SAAKS,GAAL,CAAS,mBAAMC,GAAN,CAAUF,GAAV,EAAeR,QAAf,CAAT;AACD;;AAEDW,eAAaH,GAAb,EAA0BR,QAA1B,EAA8C;AAAA,oBAA9B,8BAA8B;;AAAA,yBAAZ,gCAAY;;AAAA;;AAAA;;AAC5C,SAAKS,GAAL,CAAS,mBAAMG,IAAN,CAAWJ,GAAX,EAAgBR,QAAhB,CAAT;AACD;;AAEDa,SAAOC,MAAP,EAAiCC,mBAAjC,EAA+D;AAAA,mCAAX,+BAAG,8BAAH,CAAW;;AAAA,0CAAlD,gBAAkD;;AAAA;;AAC7D,SAAKD,MAAL,GAAc,0BAAWA,MAAX,CAAd;AACA,6BAAUC,mBAAV,EAA+B,IAA/B;AACA,SAAKtB,OAAL,CAAauB,OAAb,CAAsBZ,IAAD;AAAA,sBAAK,mCAAL;;AAAA;;AAAA,aAAoB,KAAKZ,IAAL,CAAUW,OAAV,CAAkBC,IAAlB,CAApB;AAAA,KAArB;AACD;;AAEDa,SAAO;AACL,WAAO,KAAKzB,IAAL,CAAU0B,KAAV,EAAP;AACD;AAjD0C,C;;;;;;;kBAAxB5B,W","file":"index.js","sourcesContent":["/* @flow */\nimport Koa from 'koa';\nimport route from 'koa-route';\nimport alplisten from 'alp-listen/src';\nimport object2map from 'object2map';\nimport Pool from '../../src/pool';\n// import bodyParser from 'koa-bodyparser';\nimport createSlackActions from './slack';\nimport type { StorageType, TeamType } from '../types/index';\n\ntype SlackClientConfigType = {|\n  clientID: string,\n  clientSecret: string,\n|};\n\ntype SlackServerConfigType = {|\n  slackClient: SlackClientConfigType,\n  pool: Pool,\n  storage: StorageType,\n  scopes: Array<string>,\n  callbackUrl: ?string,\n  redirectUrl: ?string,\n|};\n\ntype ListenConfigType = {|\n  tls: ?boolean,\n  socketPath: ?string,\n  port: ?number,\n  hostname: ?string,\n|};\n\nexport default class SlackServer extends Koa {\n  pool: Pool;\n  storage: StorageType;\n\n  constructor({\n    pool,\n    storage,\n    slackClient,\n    scopes,\n    callbackUrl = '/callback',\n    redirectUrl = '/success',\n  }: SlackServerConfigType) {\n    super();\n    this.pool = pool;\n    this.storage = storage;\n    // this.use(bodyParser());\n\n    const slackActions = createSlackActions({\n      client: slackClient,\n      scopes,\n      callbackUrl,\n      redirectUrl,\n      callback: async (installInfo) => {\n        const team: TeamType = await this.storage.installedTeam(installInfo);\n        this.pool.addTeam(team);\n        this.emit('installed', installInfo);\n      },\n    });\n\n    this.registerGet('/', slackActions.authorize);\n    this.registerGet(callbackUrl, slackActions.callback);\n  }\n\n  registerGet(url: string, callback: Function) {\n    this.use(route.get(url, callback));\n  }\n\n  registerPost(url: string, callback: Function) {\n    this.use(route.post(url, callback));\n  }\n\n  listen(config: ListenConfigType, certificatesDirname: ?string) {\n    this.config = object2map(config);\n    alplisten(certificatesDirname)(this);\n    this.storage.forEach((team: TeamType) => this.pool.addTeam(team));\n  }\n\n  stop() {\n    return this.pool.close();\n  }\n}\n"]}