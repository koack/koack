{"version":3,"sources":["../../src/server/index.js"],"names":["Koa","route","alplisten","object2map","createSlackActions","SlackServer","constructor","pool","storage","slackClient","scopes","callbackUrl","redirectUrl","slackActions","client","callback","installInfo","team","installedTeam","addTeam","emit","registerGet","authorize","url","use","get","registerPost","post","listen","config","certificatesDirname","forEach","stop","close"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,KAAP,MAAkB,WAAlB;AACA,OAAOC,SAAP;AACA,OAAOC,UAAP,MAAuB,YAAvB;;AAEA;AACA,OAAOC,kBAAP,MAA+B,SAA/B;IAwBqBC,W,GAAN,cAA0BL,GAA1B,CAA8B;;AAI3CM,cAAY;AACVC,QADU;AAEVC,WAFU;AAGVC,eAHU;AAIVC,UAJU;AAKVC,kBAAc,WALJ;AAMVC,kBAAc;AANJ,GAAZ,EAO0B;AACxB;AACA,SAAKL,IAAL,GAAYA,IAAZ;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA;;AAEA,UAAMK,eAAeT,mBAAmB;AACtCU,cAAQL,WAD8B;AAEtCC,YAFsC;AAGtCC,iBAHsC;AAItCC,iBAJsC;AAKtCG,gBAAU,MAAOC,WAAP,IAAuB;AAC/B,cAAMC,OAAiB,MAAM,KAAKT,OAAL,CAAaU,aAAb,CAA2BF,WAA3B,CAA7B;AACA,aAAKT,IAAL,CAAUY,OAAV,CAAkBF,IAAlB;AACA,aAAKG,IAAL,CAAU,WAAV,EAAuBJ,WAAvB;AACD;AATqC,KAAnB,CAArB;;AAYA,SAAKK,WAAL,CAAiB,GAAjB,EAAsBR,aAAaS,SAAnC;AACA,SAAKD,WAAL,CAAiBV,WAAjB,EAA8BE,aAAaE,QAA3C;AACD;;AAEDM,cAAYE,GAAZ,EAAyBR,QAAzB,EAA6C;AAC3C,SAAKS,GAAL,CAASvB,MAAMwB,GAAN,CAAUF,GAAV,EAAeR,QAAf,CAAT;AACD;;AAEDW,eAAaH,GAAb,EAA0BR,QAA1B,EAA8C;AAC5C,SAAKS,GAAL,CAASvB,MAAM0B,IAAN,CAAWJ,GAAX,EAAgBR,QAAhB,CAAT;AACD;;AAEDa,SAAOC,MAAP,EAAiCC,mBAAjC,EAA+D;AAC7D,SAAKD,MAAL,GAAc1B,WAAW0B,MAAX,CAAd;AACA3B,cAAU4B,mBAAV,EAA+B,IAA/B;AACA,SAAKtB,OAAL,CAAauB,OAAb,CAAsBd,IAAD,IAAoB,KAAKV,IAAL,CAAUY,OAAV,CAAkBF,IAAlB,CAAzC;AACD;;AAEDe,SAAO;AACL,WAAO,KAAKzB,IAAL,CAAU0B,KAAV,EAAP;AACD;AAjD0C,C;SAAxB5B,W","file":"index.js","sourcesContent":["import Koa from 'koa';\nimport route from 'koa-route';\nimport alplisten from 'alp-listen/src';\nimport object2map from 'object2map';\nimport Pool from '../../src/pool';\n// import bodyParser from 'koa-bodyparser';\nimport createSlackActions from './slack';\nimport type { StorageType, TeamType } from '../types/index';\n\ntype SlackClientConfigType = {|\n  clientID: string,\n  clientSecret: string,\n|};\n\ntype SlackServerConfigType = {|\n  slackClient: SlackClientConfigType,\n  pool: Pool,\n  storage: StorageType,\n  scopes: Array<string>,\n  callbackUrl: ?string,\n  redirectUrl: ?string,\n|};\n\ntype ListenConfigType = {|\n  tls: ?boolean,\n  socketPath: ?string,\n  port: ?number,\n  hostname: ?string,\n|};\n\nexport default class SlackServer extends Koa {\n  pool: Pool;\n  storage: StorageType;\n\n  constructor({\n    pool,\n    storage,\n    slackClient,\n    scopes,\n    callbackUrl = '/callback',\n    redirectUrl = '/success',\n  }: SlackServerConfigType) {\n    super();\n    this.pool = pool;\n    this.storage = storage;\n    // this.use(bodyParser());\n\n    const slackActions = createSlackActions({\n      client: slackClient,\n      scopes,\n      callbackUrl,\n      redirectUrl,\n      callback: async (installInfo) => {\n        const team: TeamType = await this.storage.installedTeam(installInfo);\n        this.pool.addTeam(team);\n        this.emit('installed', installInfo);\n      },\n    });\n\n    this.registerGet('/', slackActions.authorize);\n    this.registerGet(callbackUrl, slackActions.callback);\n  }\n\n  registerGet(url: string, callback: Function) {\n    this.use(route.get(url, callback));\n  }\n\n  registerPost(url: string, callback: Function) {\n    this.use(route.post(url, callback));\n  }\n\n  listen(config: ListenConfigType, certificatesDirname: ?string) {\n    this.config = object2map(config);\n    alplisten(certificatesDirname)(this);\n    this.storage.forEach((team: TeamType) => this.pool.addTeam(team));\n  }\n\n  stop() {\n    return this.pool.close();\n  }\n}\n"]}