{"version":3,"sources":["../../src/message-router/createActionHandlersMap.js"],"names":["compose","Logger","logger","actions","map","dm","commands","Map","regexps","channel","group","forEach","action","where","mention","filter","v","handler","middlewares","stop","command","has","get","warn","set","regexp","push"],"mappings":"AACA,OAAOA,OAAP,MAAoB,aAApB;AACA,OAAOC,MAAP;;;AAGA,MAAMC,SAAS,IAAID,MAAJ,CAAW,8BAAX,CAAf;;AAaA,gBAAgBE,OAAD,IAAgD;AAC7D,QAAMC,MAAsB;AAC1BC,QAAI,EAAEC,UAAU,IAAIC,GAAJ,EAAZ,EAAuBC,WAAvB,EADsB;AAE1BC,aAAS,EAAEH,UAAU,IAAIC,GAAJ,EAAZ,EAAuBC,WAAvB,EAFiB;AAG1BE,WAAO,EAAEJ,UAAU,IAAIC,GAAJ,EAAZ,EAAuBC,WAAvB;AAHmB,GAA5B;;AAMAL,UAAQQ,OAAR,CAAiBC,MAAD,IAAwB;AACtC,QAAI,CAACA,OAAOC,KAAZ,EAAmBD,OAAOC,KAAP;AACnB,QAAI,CAACD,OAAOE,OAAZ,EAAqBF,OAAOE,OAAP,GAAiBF,OAAOC,KAAP,CAAaE,MAAb,CAAoBC,KAAKA,MAAM,IAA/B,CAAjB;AACrB,QAAI,CAACJ,OAAOK,OAAZ,EAAqBL,OAAOK,OAAP,GAAiBjB,QAAQY,OAAOM,WAAf,CAAjB;AACrB,QAAIN,OAAOO,IAAP,KAAgB,KAApB,EAA2BP,OAAOO,IAAP,GAAc,IAAd;;AAE3BP,WAAOC,KAAP,CAAaF,OAAb,CAAsBE,KAAD,IAAW;AAC9B,YAAMP,WAAoCF,IAAIS,KAAJ,EAAWP,QAArD;AACA,YAAME,UAA6BJ,IAAIS,KAAJ,EAAWL,OAA9C;;AAEA,UAAII,OAAON,QAAX,EAAqB;AACnBM,eAAON,QAAP,CAAgBK,OAAhB,CAAyBS,OAAD,IAAqB;AAC3C,cAAId,SAASe,GAAT,CAAaD,OAAb,KAAyBd,SAASgB,GAAT,CAAaF,OAAb,MAA0BR,MAAvD,EAA+D;AAC7DV,mBAAOqB,IAAP,CAAY,iBAAZ,EAA+B,EAAEH,OAAF,EAA/B;AACD;;AAEDd,mBAASkB,GAAT,CAAaJ,OAAb,EAAsBR,MAAtB;AACD,SAND;AAOD;;AAED,UAAIA,OAAOa,MAAP,IAAiB,CAACb,OAAON,QAA7B,EAAuC;AACrCE,gBAAQkB,IAAR,CAAad,MAAb;AACD;AACF,KAjBD;AAkBD,GAxBD;;AA0BA,SAAOR,GAAP;AACD,CAlCD","file":"createActionHandlersMap.js","sourcesContent":["/* @flow */\nimport compose from 'koa-compose';\nimport Logger from 'nightingale-logger/src';\nimport type { ActionType } from './types';\n\nconst logger = new Logger('koack:message-router:actions');\n\ntype ActionHandlersType = {|\n  commands: Map<string, ActionType>,\n  regexps: Array<ActionType>,\n|};\n\ntype ActionsMapType = {|\n  dm: ActionHandlersType,\n  channel: ActionHandlersType,\n  group: ActionHandlersType,\n|};\n\nexport default (actions: Array<ActionType>): ActionsMapType => {\n  const map: ActionsMapType = {\n    dm: { commands: new Map(), regexps: [] },\n    channel: { commands: new Map(), regexps: [] },\n    group: { commands: new Map(), regexps: [] },\n  };\n\n  actions.forEach((action: ActionType) => {\n    if (!action.where) action.where = ['dm', 'channel', 'group'];\n    if (!action.mention) action.mention = action.where.filter(v => v !== 'dm');\n    if (!action.handler) action.handler = compose(action.middlewares);\n    if (action.stop !== false) action.stop = true;\n\n    action.where.forEach((where) => {\n      const commands: Map<string, ActionType> = map[where].commands;\n      const regexps: Array<ActionType> = map[where].regexps;\n\n      if (action.commands) {\n        action.commands.forEach((command: string) => {\n          if (commands.has(command) && commands.get(command) !== action) {\n            logger.warn('override action', { command });\n          }\n\n          commands.set(command, action);\n        });\n      }\n\n      if (action.regexp || !action.commands) {\n        regexps.push(action);\n      }\n    });\n  });\n\n  return map;\n};\n"]}