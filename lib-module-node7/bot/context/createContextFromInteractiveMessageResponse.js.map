{"version":3,"sources":["../../../src/bot/context/createContextFromInteractiveMessageResponse.js"],"names":["fetch","extractIdFromHttp","key","event","id","extrackUserIdFromHttp","extrackChannelIdFromHttp","botContext","data","ctx","Object","create","assign","actions","reply","text","replace","responseUrl","method","body","JSON","stringify","replace_original","then","res","json","replyEphemeral","response_type","userId","channelId","logger","context","callbackId"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,YAAlB;;;AAGA,MAAMC,oBAAqBC,GAAD,IACvBC,KAAD,IAAmB;AACjB,MAAI,OAAOA,MAAMD,GAAN,CAAP,KAAsB,QAA1B,EAAoC;AAClC,WAAOC,MAAMD,GAAN,CAAP;AACD;AACD,MAAI,OAAOC,MAAMD,GAAN,CAAP,KAAsB,QAA1B,EAAoC;AAClC,WAAOC,MAAMD,GAAN,EAAWE,EAAlB;AACD;;AAED,SAAO,IAAP;AACD,CAVH;;AAcA,MAAMC,wBAAwBJ,kBAAkB,MAAlB,CAA9B;AACA,MAAMK,2BAA2BL,kBAAkB,SAAlB,CAAjC;;AAEA,gBAAe,CAACM,UAAD,EAA0BC,IAA1B,KAA6D;AAC1E,QAAMC,MAAMC,OAAOC,MAAP,CAAcJ,UAAd,CAAZ;;AAEA;;;;;;;;;;;;;;;AAeA,SAAOG,OAAOE,MAAP,CAAcH,GAAd,EAAmB;AACxBD,QADwB;AAExBK,aAASL,KAAKK,OAFU;AAGxBC,UAAMC,IAAN,EAAoB,EAAEC,UAAU,KAAZ,OAApB,EAA8C;AAC5C,aAAOhB,MAAM,KAAKQ,IAAL,CAAUS,WAAhB,EAA6B,EAAEC,QAAQ,MAAV;AAClCC,cAAMC,KAAKC,SAAL,CAAe;AACnB;AACAC,4BAAkBN,OAFC;AAGnBD;AAHmB,SAAf,CAD4B,EAA7B,EAKCQ,IALD,CAKMC,OAAOA,IAAIC,IAAJ,EALb,CAAP;AAMD,KAVuB;AAWxBC,mBAAeX,IAAf,EAA6B,EAAEC,UAAU,KAAZ,OAA7B,EAAuD;AACrD,aAAOhB,MAAM,KAAKQ,IAAL,CAAUS,WAAhB,EAA6B,EAAEC,QAAQ,MAAV;AAClCC,cAAMC,KAAKC,SAAL,CAAe;AACnB;AACAM,yBAAe,WAFI;AAGnB;AACAL,4BAAkBN,OAJC;AAKnBD;AALmB,SAAf,CAD4B,EAA7B,EAOCQ,IAPD,CAOMC,OAAOA,IAAIC,IAAJ,EAPb,CAAP;AAQD,KApBuB;AAqBxBG,YAAQvB,sBAAsBG,IAAtB,CArBgB;AAsBxBqB,eAAWvB,yBAAyBE,IAAzB,CAtBa;AAuBxBsB,YAAQrB,IAAIqB,MAAJ,CAAWC,OAAX,CAAmB,EAAEC,YAAYxB,KAAKwB,UAAnB,EAA+BnB,SAASL,KAAKK,OAA7C,EAAnB;AAvBgB,GAAnB,CAAP;AAyBD,CA3CD","file":"createContextFromInteractiveMessageResponse.js","sourcesContent":["import fetch from 'node-fetch';\nimport type { ContextType, EventContextType } from '../../types';\n\nconst extractIdFromHttp = (key: string) => (\n  (event: Object) => {\n    if (typeof event[key] === 'string') {\n      return event[key];\n    }\n    if (typeof event[key] === 'object') {\n      return event[key].id;\n    }\n\n    return null;\n  }\n);\n\n\nconst extrackUserIdFromHttp = extractIdFromHttp('user');\nconst extrackChannelIdFromHttp = extractIdFromHttp('channel');\n\nexport default (botContext: ContextType, data: Object): EventContextType => {\n  const ctx = Object.create(botContext);\n\n  /*\n    const data = {\n      actions,\n      callbackId,\n      team,\n      channel,\n      user,\n      actionTs,\n      messageTs,\n      attachmentId,\n      originalMessage,\n      responseUrl,\n    };\n  */\n\n  return Object.assign(ctx, {\n    data,\n    actions: data.actions,\n    reply(text: string, { replace = false } = {}) {\n      return fetch(this.data.responseUrl, { method: 'POST',\n        body: JSON.stringify({\n          // eslint-disable-next-line camelcase\n          replace_original: replace,\n          text,\n        }) }).then(res => res.json());\n    },\n    replyEphemeral(text: string, { replace = false } = {}) {\n      return fetch(this.data.responseUrl, { method: 'POST',\n        body: JSON.stringify({\n          // eslint-disable-next-line camelcase\n          response_type: 'ephemeral',\n          // eslint-disable-next-line camelcase\n          replace_original: replace,\n          text,\n        }) }).then(res => res.json());\n    },\n    userId: extrackUserIdFromHttp(data),\n    channelId: extrackChannelIdFromHttp(data),\n    logger: ctx.logger.context({ callbackId: data.callbackId, actions: data.actions }),\n  });\n};\n"]}