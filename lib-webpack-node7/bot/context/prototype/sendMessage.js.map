{"version":3,"sources":["../../../../src/bot/context/prototype/sendMessage.js"],"names":["transformAttachment","attachment","fallback","color","pretext","author_name","author","name","author_link","link","author_icon","icon","title","title_link","titleLink","fields","image_url","imageUrl","thumb_url","thumbUrl","footer","footer_icon","footerIcon","ctx","channelId","message","options","rtm","sendMessage","webClient","chat","postMessage","parse","link_names","linkNames","attachments","map","unfurl_links","unfurlLinks","unfurl_media","unfurlMedia","username","as_user","asUser","icon_url","iconUrl","icon_emoji","iconEmoj","thread_ts","threadTs","reply_broadcast","replyBroadcast"],"mappings":";;AA4CA,MAAMA,sBAAuBC,UAAD,KAAiC;AAC3DC,YAAUD,WAAWC,QADsC;AAE3DC,SAAOF,WAAWE,KAFyC;AAG3DC,WAASH,WAAWG,OAHuC;AAI3DC,eAAaJ,WAAWK,MAAX,IAAqBL,WAAWK,MAAX,CAAkBC,IAJO;AAK3DC,eAAaP,WAAWK,MAAX,IAAqBL,WAAWK,MAAX,CAAkBG,IALO;AAM3DC,eAAaT,WAAWK,MAAX,IAAqBL,WAAWK,MAAX,CAAkBK,IANO;AAO3DC,SAAOX,WAAWW,KAPyC;AAQ3DC,cAAYZ,WAAWa,SARoC;AAS3DC,UAAQd,WAAWc,MATwC;AAU3DC,aAAWf,WAAWgB,QAVqC;AAW3DC,aAAWjB,WAAWkB,QAXqC;AAY3DC,UAAQnB,WAAWmB,MAZwC;AAa3DC,eAAapB,WAAWqB;AAbmC,CAAjC,CAA5B,C,CA5CA;;;AA4DA,gBAAe,CAACC,GAAD,EAAMC,SAAN,EAAyBC,OAAzB,EAA0CC,OAA1C,KAA+E;AAC5F,MAAI,CAACA,OAAL,EAAc;AACZ,WAAOH,IAAII,GAAJ,CAAQC,WAAR,CAAoBH,OAApB,EAA6BD,SAA7B,CAAP;AACD;;AAED,SAAOD,IAAIM,SAAJ,CAAcC,IAAd,CAAmBC,WAAnB,CAA+BP,SAA/B,EAA0CC,OAA1C,EAAmD;AACxDO,WAAON,QAAQM,KADyC;AAExDC,gBAAYP,QAAQQ,SAFoC;AAGxDC,iBAAaT,QAAQS,WAAR,CAAoBC,GAApB,CAAwBpC,mBAAxB,CAH2C;AAIxDqC,kBAAcX,QAAQY,WAJkC;AAKxDC,kBAAcb,QAAQc,WALkC;AAMxDC,cAAUf,QAAQe,QANsC;AAOxDC,aAAShB,QAAQiB,MAPuC;AAQxDC,cAAUlB,QAAQmB,OARsC;AASxDC,gBAAYpB,QAAQqB,QAToC;AAUxDC,eAAWtB,QAAQuB,QAVqC;AAWxDC,qBAAiBxB,QAAQyB;AAX+B,GAAnD,CAAP;AAaD,CAlBD","file":"sendMessage.js","sourcesContent":["/* eslint-disable camelcase */\ntype ParseType = 'none' | 'full';\n\ntype AuthorType = {|\n  name: ?string,\n  link: ?string,\n  icon: ?string,\n|};\n\ntype AttachmentFieldType = {|\n  title: string,\n  value: string,\n  short: ?boolean,\n|};\n\ntype AttachmentType = {|\n  fallback: string,\n  color: ?string,\n  pretext: ?string,\n  author: ?AuthorType,\n  title: ?string,\n  titleLink: ?string,\n  text: string,\n  fields: ?Array<AttachmentFieldType>,\n  imageUrl: ?string,\n  thumbUrl: ?string,\n  footer: ?string,\n  footerIcon: ?string,\n|};\n\nexport type SendMessageOptionsType = {|\n  parse: ?ParseType,\n  linkNames: ?boolean,\n  attachments: ?Array<AttachmentType>,\n  unfurlLinks: ?boolean,\n  unfurlMedia: ?boolean,\n  username: ?string,\n  asUser: ?boolean,\n  iconUrl: ?boolean,\n  iconEmoj: ?boolean,\n  threadTs: ?string,\n  replyBroadcast: ?boolean,\n|};\n\nconst transformAttachment = (attachment: AttachmentType) => ({\n  fallback: attachment.fallback,\n  color: attachment.color,\n  pretext: attachment.pretext,\n  author_name: attachment.author && attachment.author.name,\n  author_link: attachment.author && attachment.author.link,\n  author_icon: attachment.author && attachment.author.icon,\n  title: attachment.title,\n  title_link: attachment.titleLink,\n  fields: attachment.fields,\n  image_url: attachment.imageUrl,\n  thumb_url: attachment.thumbUrl,\n  footer: attachment.footer,\n  footer_icon: attachment.footerIcon,\n});\n\nexport default (ctx, channelId: string, message: string, options: ?SendMessageOptionsType) => {\n  if (!options) {\n    return ctx.rtm.sendMessage(message, channelId);\n  }\n\n  return ctx.webClient.chat.postMessage(channelId, message, {\n    parse: options.parse,\n    link_names: options.linkNames,\n    attachments: options.attachments.map(transformAttachment),\n    unfurl_links: options.unfurlLinks,\n    unfurl_media: options.unfurlMedia,\n    username: options.username,\n    as_user: options.asUser,\n    icon_url: options.iconUrl,\n    icon_emoji: options.iconEmoj,\n    thread_ts: options.threadTs,\n    reply_broadcast: options.replyBroadcast,\n  });\n};\n"]}