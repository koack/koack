{"version":3,"sources":["../../src/message-router/index.js"],"names":["handle","ctx","message","action","extendsContext","messageCtx","Object","create","assign","logger","context","_context","handler","canCommandHandleWithMention","hasMention","command","destinationType","mention","includes","actions","mentionOnly","every","map","next","event","text","userId","rtm","activeUserId","botMention","ts","originalText","type","messageType","subtype","messageSubtype","teamId","channelId","getChannelType","debug","warn","startsWithMention","startsWith","substr","length","trim","replace","split","toLowerCase","actionCommand","commands","get","stop","regexps","some","match","regexp"],"mappings":";;;;;;AACA;;AACA;;;;;;;;;;;;;;AAEA,MAAMA,SAAS,CAACC,GAAD,EAAMC,OAAN,EAA4BC,MAA5B,EAAgDC,cAAhD,KAA2E;AAAA,qBAA9D,sCAA8D;;AAAA,oBAAzC,qCAAyC;;AAAA,4BAAb,8BAAa;;AAAA;;AAAA;;AAAA;;AACxF,MAAIC,aAAaC,OAAOC,MAAP,CAAcN,GAAd,CAAjB;;AAEAK,SAAOE,MAAP,CAAcH,UAAd;AACEH;AADF,KAEKE,cAFL;AAGEK,YAAQR,IAAIQ,MAAJ,CAAWC,OAAX,mBACHT,IAAIQ,MAAJ,CAAWE,QADR;AAENT;AAFM;AAHV;;AASAC,SAAOS,OAAP,CAAeP,UAAf;AACD,CAbD;;AAeA,MAAMQ,8BAA8B,CAACC,UAAD,EAAaC,OAAb,EAAsBC,eAAtB,KAA0C;AAC5E,MAAI,CAACF,UAAL,EAAiB;AACf,QAAIC,QAAQE,OAAR,KAAoB,KAAxB,EAA+B,OAAO,IAAP;AAC/B,QAAIF,QAAQE,OAAR,CAAgBC,QAAhB,CAAyBF,eAAzB,CAAJ,EAA+C,OAAO,KAAP;AAChD,GAHD,MAGO;AACL;AACA;AACA,QAAID,QAAQE,OAAR,KAAoB,KAAxB,EAA+B,OAAO,KAAP;AAChC;AACD,SAAO,IAAP;AACD,CAVD;;kBAYe,uBAACE,OAAD,EAAgC;AAAA,qBAAxB,4BAAQ,qCAAR,CAAwB;;AAAA;;AAC7C,QAAMC,cAAcD,QAAQE,KAAR,CAAclB,UAAUA,OAAOc,OAAP,KAAmB,IAA3C,CAApB;AACA,QAAMK,MAAM,uCAAwBH,OAAxB,CAAZ;;AAEA,SAAO,CAAClB,GAAD,EAAMsB,IAAN,KAAe;AACpB,QAAI,CAACtB,IAAIuB,KAAJ,CAAUC,IAAX,IAAmBxB,IAAIyB,MAAJ,KAAezB,IAAI0B,GAAJ,CAAQC,YAA9C,EAA4D;;AAE5D,UAAMC,aAAc,KAAI5B,IAAI0B,GAAJ,CAAQC,YAAa,GAA7C;;AAEA,UAAM,EAAEE,EAAF,EAAML,MAAMM,YAAZ,EAA0BC,MAAMC,WAAhC,EAA6CC,SAASC,cAAtD,KAAyElC,IAAIuB,KAAnF;AACA,UAAM,EAAEY,MAAF,EAAUV,MAAV,EAAkBW,SAAlB,KAAgCpC,GAAtC;AACA,UAAMe,kBAAkBf,IAAIqC,cAAJ,EAAxB;AACA,QAAIb,OAAOM,YAAX;;AAEA9B,QAAIQ,MAAJ,CAAW8B,KAAX,CAAiB,SAAjB,EAA4B,EAAET,EAAF,EAAMd,eAAN,EAAuBS,IAAvB,EAA6BQ,WAA7B,EAA0CE,cAA1C,EAA5B;AACA,QAAI,CAACnB,eAAL,EAAsB;AACpBf,UAAIQ,MAAJ,CAAW+B,IAAX,CAAgB,8BAAhB,EAAgD,EAAExB,eAAF,EAAhD;AACA,aAAOO,MAAP;AACD;;AAED,UAAMkB,oBAAoBhB,KAAKiB,UAAL,CAAgBb,UAAhB,CAA1B;AACA,UAAMf,aAAa2B,qBAAqBhB,KAAKP,QAAL,CAAcW,UAAd,CAAxC;;AAEA,QAAIT,eAAe,CAACN,UAApB,EAAgC;AAC9B,aAAOS,MAAP;AACD;;AAED,oBAAa,sCAAb,QAA6B,EAAEO,EAAF,EAAML,MAAMM,YAAZ,EAA0BK,MAA1B,EAAkCV,MAAlC,EAA0CW,SAA1C,EAA7B;;AAEA;AACA;AACA,QAAII,iBAAJ,EAAuB;AACrBhB,aAAOA,KAAKkB,MAAL,CAAYd,WAAWe,MAAvB,CAAP;AACD;;AAED;AACAnB,WAAOA,KAAKoB,IAAL,GAAYC,OAAZ,CAAoB,kBAApB,EAAwC,EAAxC,CAAP;;AAEA;AACA,UAAM/B,UAAUU,KAAKsB,KAAL,CAAW,GAAX,EAAgB,CAAhB,EAAmB,CAAnB,EAAsBC,WAAtB,EAAhB;AACA,UAAMC,gBAAgBlC,WAAWO,IAAIN,eAAJ,EAAqBkC,QAArB,CAA8BC,GAA9B,CAAkCpC,OAAlC,CAAjC;;AAEA,QAAIkC,iBAAiBpC,4BAA4BC,UAA5B,EAAwCmC,aAAxC,EAAuDjC,eAAvD,CAArB,EAA8F;AAC5FS,aAAOA,KAAKkB,MAAL,CAAY5B,QAAQ6B,MAApB,EAA4BE,OAA5B,CAAoC,kBAApC,EAAwD,EAAxD,CAAP;;AAEA7C,UAAIQ,MAAJ,CAAW8B,KAAX,CAAiB,eAAjB,EAAkC,EAAExB,OAAF,EAAWU,IAAX,EAAlC;;AAEAzB,aAAOC,GAAP,EAAY,EAAEwB,IAAF,EAAZ,EAAsBvB,OAAtB,EAA+B+C,aAA/B;;AAEA,UAAIA,cAAcG,IAAlB,EAAwB;AACtB;AACD;AACF;;AAED;AACA,QAAI9B,IAAIN,eAAJ,EAAqBqC,OAArB,CAA6BC,IAA7B,CAAmCnD,MAAD,IAAY;AAChD,UAAI,CAACU,4BAA4BC,UAA5B,EAAwCX,MAAxC,EAAgDa,eAAhD,CAAL,EAAuE,OAAO,KAAP;;AAEvE,YAAMuC,QAAQ,CAACpD,OAAOqD,MAAR,GAAiB,IAAjB,GAAwB/B,KAAK8B,KAAL,CAAWpD,OAAOqD,MAAlB,CAAtC;AACA,UAAI,CAACD,KAAL,EAAY,OAAO,KAAP;;AAEZtD,UAAIQ,MAAJ,CAAW8B,KAAX,CAAiB,cAAjB,EAAiC,EAAEd,IAAF,EAAQ8B,KAAR,EAAjC;AACAvD,aAAOC,GAAP,EAAY,EAAEwB,IAAF,EAAQ8B,KAAR,EAAZ,EAA6BrD,OAA7B,EAAsCC,MAAtC;;AAEA,aAAOA,OAAOiD,IAAd;AACD,KAVG,CAAJ,EAUI;AACF;AACD;;AAED;AACA,WAAO7B,MAAP;AACD,GAnED;AAoED,C","file":"index.js","sourcesContent":["/* @flow */\nimport type { ActionType, MessageType } from './types';\nimport createActionHandlersMap from './createActionHandlersMap';\n\nconst handle = (ctx, message: MessageType, action: ActionType, extendsContext: Object) => {\n  let messageCtx = Object.create(ctx);\n\n  Object.assign(messageCtx, {\n    message,\n    ...extendsContext,\n    logger: ctx.logger.context({\n      ...ctx.logger._context,\n      message,\n    }),\n  });\n\n  action.handler(messageCtx);\n};\n\nconst canCommandHandleWithMention = (hasMention, command, destinationType) => {\n  if (!hasMention) {\n    if (command.mention === false) return true;\n    if (command.mention.includes(destinationType)) return false;\n  } else {\n    // if hasMention\n    // eslint-disable-next-line no-lonely-if\n    if (command.mention === false) return false;\n  }\n  return true;\n};\n\nexport default (actions: Array<ActionType>) => {\n  const mentionOnly = actions.every(action => action.mention === true);\n  const map = createActionHandlersMap(actions);\n\n  return (ctx, next) => {\n    if (!ctx.event.text || ctx.userId === ctx.rtm.activeUserId) return;\n\n    const botMention = `<@${ctx.rtm.activeUserId}>`;\n\n    const { ts, text: originalText, type: messageType, subtype: messageSubtype } = ctx.event;\n    const { teamId, userId, channelId } = ctx;\n    const destinationType = ctx.getChannelType();\n    let text = originalText;\n\n    ctx.logger.debug('message', { ts, destinationType, text, messageType, messageSubtype });\n    if (!destinationType) {\n      ctx.logger.warn('Unsupported destination type', { destinationType });\n      return next();\n    }\n\n    const startsWithMention = text.startsWith(botMention);\n    const hasMention = startsWithMention || text.includes(botMention);\n\n    if (mentionOnly && !hasMention) {\n      return next();\n    }\n\n    const message: MessageType = { ts, text: originalText, teamId, userId, channelId };\n\n    // Clean text\n    // Remove mention\n    if (startsWithMention) {\n      text = text.substr(botMention.length);\n    }\n\n    // remove `:` (`@bot: do something !`)\n    text = text.trim().replace(/^[\\s:]*(?!\\w)\\s*/, '');\n\n    // try to find a command\n    const command = text.split(' ', 2)[0].toLowerCase();\n    const actionCommand = command && map[destinationType].commands.get(command);\n\n    if (actionCommand && canCommandHandleWithMention(hasMention, actionCommand, destinationType)) {\n      text = text.substr(command.length).replace(/^[\\s:]*(?!\\w)\\s*/, '');\n\n      ctx.logger.debug('actionCommand', { command, text });\n\n      handle(ctx, { text }, message, actionCommand);\n\n      if (actionCommand.stop) {\n        return;\n      }\n    }\n\n    // try to find a matching regexp\n    if (map[destinationType].regexps.some((action) => {\n      if (!canCommandHandleWithMention(hasMention, action, destinationType)) return false;\n\n      const match = !action.regexp ? true : text.match(action.regexp);\n      if (!match) return false;\n\n      ctx.logger.debug('actionRegexp', { text, match });\n      handle(ctx, { text, match }, message, action);\n\n      return action.stop;\n    })) {\n      return;\n    }\n\n    // Could not find anything\n    return next();\n  };\n};\n"]}