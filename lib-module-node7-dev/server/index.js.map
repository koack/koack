{"version":3,"sources":["../../src/server/index.js"],"names":["Koa","route","alplisten","object2map","Pool","createSlackActions","StorageType","TeamType","SlackServer","constructor","pool","storage","slackClient","scopes","callbackUrl","redirectUrl","slackActions","client","callback","installInfo","installedTeam","addTeam","team","emit","registerGet","authorize","url","use","get","registerPost","post","listen","config","certificatesDirname","forEach","stop","close"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,KAAP,MAAkB,WAAlB;AACA,OAAOC,SAAP;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,IAAP;AACA;AACA,OAAOC,kBAAP,MAA+B,SAA/B;AACA,SAAcC,2BAAd,EAA2BC,qBAA3B,QAA2C,gBAA3C;;;;;AAEA,8DAA6B,cAC3B,uBAAU,UAAV,CAD2B,EAE3B,2BAAc,UAAd,CAF2B,CAA7B;AAKA,8DAA6B,cAC3B,0BAAa,qBAAb,CAD2B,EAE3B,mBAAM,WAAN,CAF2B,EAG3B,sBAAS,kBAAT,CAH2B,EAI3B,qBAAQ,QAAM,UAAN,CAAR,CAJ2B,EAK3B,0BAAa,WAAC,UAAD,CAAb,CAL2B,EAM3B,0BAAa,WAAC,UAAD,CAAb,CAN2B,CAA7B;AASA,oDAAwB,cACtB,kBAAK,WAAC,WAAD,CAAL,CADsB,EAEtB,yBAAY,WAAC,UAAD,CAAZ,CAFsB,EAGtB,mBAAM,WAAC,UAAD,CAAN,CAHsB,EAItB,uBAAU,WAAC,UAAD,CAAV,CAJsB,CAAxB;IAOqBC,W;SACf,W;uBACG,kB,aAFM,cAA0BR,GAA1B,CAA8B;;AAI3CS,oBAO0B;AAAA,QAPd;AACVC,UADU;AAEVC,aAFU;AAGVC,iBAHU;AAIVC,YAJU;AAKVC,oBAAc,WALJ;AAMVC,oBAAc;AANJ,KAOc,GAAzB,qBAAyB;;AACxB;;AADwB;;AAAA;;AAExB,SAAKL,IAAL,GAAYA,IAAZ;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA;;AAEA,UAAMK,eAAeX,mBAAmB;AACtCY,cAAQL,WAD8B;AAEtCC,YAFsC;AAGtCC,iBAHsC;AAItCC,iBAJsC;AAKtCG,gBAAU,MAAOC,WAAP,IAAuB;AAC/B,qBAAU,eAAV,SAAuB,MAAM,KAAKR,OAAL,CAAaS,aAAb,CAA2BD,WAA3B,CAA7B;AACA,aAAKT,IAAL,CAAUW,OAAV,CAAkBC,IAAlB;AACA,aAAKC,IAAL,CAAU,WAAV,EAAuBJ,WAAvB;AACD;AATqC,KAAnB,CAArB;;AAYA,SAAKK,WAAL,CAAiB,GAAjB,EAAsBR,aAAaS,SAAnC;AACA,SAAKD,WAAL,CAAiBV,WAAjB,EAA8BE,aAAaE,QAA3C;AACD;;AAEDM,cAAYE,GAAZ,EAAyBR,QAAzB,EAA6C;AAAA,mBAA9B,UAA8B;;AAAA,wBAAZ,YAAY;;AAAA;AAAA;;AAC3C,SAAKS,GAAL,CAAS1B,MAAM2B,GAAN,CAAUF,GAAV,EAAeR,QAAf,CAAT;AACD;;AAEDW,eAAaH,GAAb,EAA0BR,QAA1B,EAA8C;AAAA,oBAA9B,UAA8B;;AAAA,yBAAZ,YAAY;;AAAA;AAAA;;AAC5C,SAAKS,GAAL,CAAS1B,MAAM6B,IAAN,CAAWJ,GAAX,EAAgBR,QAAhB,CAAT;AACD;;AAEDa,SAAOC,MAAP,EAAiCC,mBAAjC,EAA+D;AAAA,mCAAX,WAAG,UAAH,CAAW;;AAAA,sBAAlD,gBAAkD;AAAA;;AAC7D,SAAKD,MAAL,GAAc7B,WAAW6B,MAAX,CAAd;AACA9B,cAAU+B,mBAAV,EAA+B,IAA/B;AACA,SAAKtB,OAAL,CAAauB,OAAb,CAAsBZ,IAAD;AAAA,sBAAK,eAAL;;AAAA;AAAA,aAAoB,KAAKZ,IAAL,CAAUW,OAAV,CAAkBC,IAAlB,CAApB;AAAA,KAArB;AACD;;AAEDa,SAAO;AACL,WAAO,KAAKzB,IAAL,CAAU0B,KAAV,EAAP;AACD;AAjD0C,C;;;;;;;SAAxB5B,W","file":"index.js","sourcesContent":["import Koa from 'koa';\nimport route from 'koa-route';\nimport alplisten from 'alp-listen/src';\nimport object2map from 'object2map';\nimport Pool from '../../src/pool';\n// import bodyParser from 'koa-bodyparser';\nimport createSlackActions from './slack';\nimport type { StorageType, TeamType } from '../types/index';\n\ntype SlackClientConfigType = {|\n  clientID: string,\n  clientSecret: string,\n|};\n\ntype SlackServerConfigType = {|\n  slackClient: SlackClientConfigType,\n  pool: Pool,\n  storage: StorageType,\n  scopes: Array<string>,\n  callbackUrl: ?string,\n  redirectUrl: ?string,\n|};\n\ntype ListenConfigType = {|\n  tls: ?boolean,\n  socketPath: ?string,\n  port: ?number,\n  hostname: ?string,\n|};\n\nexport default class SlackServer extends Koa {\n  pool: Pool;\n  storage: StorageType;\n\n  constructor({\n    pool,\n    storage,\n    slackClient,\n    scopes,\n    callbackUrl = '/callback',\n    redirectUrl = '/success',\n  }: SlackServerConfigType) {\n    super();\n    this.pool = pool;\n    this.storage = storage;\n    // this.use(bodyParser());\n\n    const slackActions = createSlackActions({\n      client: slackClient,\n      scopes,\n      callbackUrl,\n      redirectUrl,\n      callback: async (installInfo) => {\n        const team: TeamType = await this.storage.installedTeam(installInfo);\n        this.pool.addTeam(team);\n        this.emit('installed', installInfo);\n      },\n    });\n\n    this.registerGet('/', slackActions.authorize);\n    this.registerGet(callbackUrl, slackActions.callback);\n  }\n\n  registerGet(url: string, callback: Function) {\n    this.use(route.get(url, callback));\n  }\n\n  registerPost(url: string, callback: Function) {\n    this.use(route.post(url, callback));\n  }\n\n  listen(config: ListenConfigType, certificatesDirname: ?string) {\n    this.config = object2map(config);\n    alplisten(certificatesDirname)(this);\n    this.storage.forEach((team: TeamType) => this.pool.addTeam(team));\n  }\n\n  stop() {\n    return this.pool.close();\n  }\n}\n"]}